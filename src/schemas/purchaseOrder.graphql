# Importe les types communs
# Note: GraphQL n'a pas de directive d'importation native, 
# mais la fusion des schémas gère cela pour nous

type PurchaseOrder {
  id: ID!
  prefix: String
  number: String!
  issueDate: String!
  validUntil: String
  client: Client!
  companyInfo: Company!
  items: [Item!]!
  status: PurchaseOrderStatus!
  headerNotes: String
  footerNotes: String
  termsAndConditions: String
  termsAndConditionsLinkTitle: String
  termsAndConditionsLink: String
  discount: Float
  discountType: DiscountType
  customFields: [CustomField!]
  totalHT: Float!
  totalTTC: Float!
  totalVAT: Float!
  finalTotalHT: Float!
  finalTotalTTC: Float!
  discountAmount: Float
  createdBy: User!
  createdAt: String!
  updatedAt: String!
  convertedToInvoice: Invoice
  linkedInvoices: [Invoice]
}

type PurchaseOrderPagination {
  purchaseOrders: [PurchaseOrder!]!
  totalCount: Int!
  hasNextPage: Boolean!
}

input CreatePurchaseOrderInput {
  prefix: String
  number: String
  issueDate: String
  validUntil: String
  client: ClientInput!
  companyInfo: CompanyInput
  items: [ItemInput!]!
  status: PurchaseOrderStatus = PENDING
  headerNotes: String
  footerNotes: String
  termsAndConditions: String
  termsAndConditionsLinkTitle: String
  termsAndConditionsLink: String
  discount: Float
  discountType: DiscountType
  customFields: [CustomFieldInput!]
}

input UpdatePurchaseOrderInput {
  prefix: String
  number: String
  issueDate: String
  validUntil: String
  client: ClientInput
  companyInfo: CompanyInput
  items: [ItemInput!]
  status: PurchaseOrderStatus
  headerNotes: String
  footerNotes: String
  termsAndConditions: String
  termsAndConditionsLinkTitle: String
  termsAndConditionsLink: String
  discount: Float
  discountType: DiscountType
  customFields: [CustomFieldInput!]
}

extend type Query {
  purchaseOrder(id: ID!): PurchaseOrder!
  purchaseOrders(startDate: String, endDate: String, status: PurchaseOrderStatus, search: String, page: Int, limit: Int): PurchaseOrderPagination!
  purchaseOrderStats: PurchaseOrderStats!
  nextPurchaseOrderNumber(prefix: String): String!
}

extend type Mutation {
  createPurchaseOrder(input: CreatePurchaseOrderInput!): PurchaseOrder!
  updatePurchaseOrder(id: ID!, input: UpdatePurchaseOrderInput!): PurchaseOrder!
  deletePurchaseOrder(id: ID!): Boolean!
  convertPurchaseOrderToInvoice(id: ID!, distribution: [Float], isDeposit: Boolean, skipValidation: Boolean): Invoice!
  changePurchaseOrderStatus(id: ID!, status: PurchaseOrderStatus!): PurchaseOrder!
  sendPurchaseOrder(id: ID!, email: String!): Boolean!
}

type PurchaseOrderStats {
  totalCount: Int!
  draftCount: Int!
  pendingCount: Int!
  canceledCount: Int!
  completedCount: Int!
  totalAmount: Float!
  conversionRate: Float!
}

enum PurchaseOrderStatus {
  DRAFT
  PENDING
  COMPLETED
  CANCELED
}
