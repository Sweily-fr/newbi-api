# schemas/kanban.graphql
type Board {
  id: ID!
  title: String!
  description: String
  userId: ID!
  columns: [Column!]!
  tasks: [Task!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Column {
  id: ID!
  title: String!
  color: String!
  boardId: ID!
  order: Int!
  tasks: [Task!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AssignedMember {
  userId: String!
  name: String!
  email: String!
  image: String
}

type Task {
  id: ID!
  title: String!
  description: String
  status: String!
  priority: String
  tags: [Tag!]
  dueDate: DateTime
  boardId: ID!
  columnId: String!
  position: Int
  checklist: [ChecklistItem!]
  assignedMembers: [AssignedMember!]
  userId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Tag {
  name: String!
  className: String!
  bg: String!
  text: String!
  border: String!
}

type ChecklistItem {
  id: ID
  text: String!
  completed: Boolean!
}

input CreateBoardInput {
  title: String!
  description: String
}

input UpdateBoardInput {
  id: ID!
  title: String
  description: String
}

input CreateColumnInput {
  title: String!
  color: String!
  boardId: ID!
  order: Int!
}

input UpdateColumnInput {
  id: ID!
  title: String
  color: String
  order: Int
}

input AssignedMemberInput {
  userId: String!
  name: String!
  email: String!
  image: String
}

input CreateTaskInput {
  title: String!
  description: String
  status: String!
  priority: String
  tags: [TagInput!]
  dueDate: DateTime
  boardId: ID!
  columnId: String!
  position: Int
  checklist: [ChecklistItemInput!]
  assignedMembers: [AssignedMemberInput!]
}

input UpdateTaskInput {
  id: ID!
  title: String
  description: String
  status: String
  priority: String
  tags: [TagInput!]
  dueDate: DateTime
  columnId: String
  position: Int
  checklist: [ChecklistItemInput!]
  assignedMembers: [AssignedMemberInput!]
}

input TagInput {
  name: String!
  className: String!
  bg: String!
  text: String!
  border: String!
}

input ChecklistItemInput {
  id: ID
  text: String!
  completed: Boolean
}

type OrganizationMember {
  id: String!
  name: String!
  email: String!
  image: String
  role: String
}

type Query {
  boards(workspaceId: ID): [Board!]!
  board(id: ID!, workspaceId: ID): Board
  columns(boardId: ID!, workspaceId: ID): [Column!]!
  column(id: ID!, workspaceId: ID): Column
  tasks(boardId: ID!, columnId: ID, workspaceId: ID): [Task!]!
  task(id: ID!, workspaceId: ID): Task
  organizationMembers(workspaceId: ID!): [OrganizationMember!]!
}

type Mutation {
  createBoard(input: CreateBoardInput!, workspaceId: ID): Board!
  updateBoard(input: UpdateBoardInput!, workspaceId: ID): Board!
  deleteBoard(id: ID!, workspaceId: ID): Boolean!
  
  createColumn(input: CreateColumnInput!, workspaceId: ID): Column!
  updateColumn(input: UpdateColumnInput!, workspaceId: ID): Column!
  deleteColumn(id: ID!, workspaceId: ID): Boolean!
  reorderColumns(columns: [ID!]!, workspaceId: ID): Boolean!
  
  createTask(input: CreateTaskInput!, workspaceId: ID): Task!
  updateTask(input: UpdateTaskInput!, workspaceId: ID): Task!
  deleteTask(id: ID!, workspaceId: ID): Boolean!
  moveTask(id: ID!, columnId: String!, position: Int!, workspaceId: ID): Task!
}

type Subscription {
  boardUpdated(workspaceId: ID!): BoardUpdatePayload!
  taskUpdated(boardId: ID!, workspaceId: ID!): TaskUpdatePayload!
  columnUpdated(boardId: ID!, workspaceId: ID!): ColumnUpdatePayload!
}

type BoardUpdatePayload {
  type: String!
  board: Board
  boardId: ID
  workspaceId: ID!
}

type TaskUpdatePayload {
  type: String!
  task: Task
  taskId: ID
  boardId: ID!
  workspaceId: ID!
}

type ColumnUpdatePayload {
  type: String!
  column: Column
  columns: [ID!]
  columnId: ID
  boardId: ID!
  workspaceId: ID!
}