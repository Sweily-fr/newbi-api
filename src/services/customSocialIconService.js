import axios from 'axios';
import CloudflareService from './cloudflareService.js';

class CustomSocialIconService {
  constructor() {
    this.baseUrls = {
      facebook: 'https://pub-4ab56834c87d44b9a4fee1c84196b095.r2.dev/facebook.svg',
      instagram: 'https://pub-4ab56834c87d44b9a4fee1c84196b095.r2.dev/instagram.svg',
      linkedin: 'https://pub-4ab56834c87d44b9a4fee1c84196b095.r2.dev/linkedin.svg',
      x: 'https://pub-4ab56834c87d44b9a4fee1c84196b095.r2.dev/x.svg'
    };
  }

  /**
   * T√©l√©charge un SVG et modifie sa couleur
   * @param {string} platform - La plateforme (facebook, instagram, linkedin, x)
   * @param {string} color - La couleur hexad√©cimale (ex: #FF0000)
   * @returns {Promise<string>} Le SVG modifi√©
   */
  async generateColoredSvg(platform, color) {
    try {
      console.log(`üé® G√©n√©ration SVG color√© pour ${platform} avec couleur ${color}`);
      
      // T√©l√©charger le SVG original
      const response = await axios.get(this.baseUrls[platform]);
      let svgContent = response.data;

      // Modifier la couleur du SVG
      // Cette approche simple remplace les couleurs existantes par la nouvelle couleur
      svgContent = this.applySvgColor(svgContent, color, platform);

      console.log(`‚úÖ SVG color√© g√©n√©r√© pour ${platform}`);
      return svgContent;
    } catch (error) {
      console.error(`‚ùå Erreur lors de la g√©n√©ration du SVG color√© pour ${platform}:`, error.message);
      throw new Error(`Impossible de g√©n√©rer le SVG color√© pour ${platform}: ${error.message}`);
    }
  }

  /**
   * Applique une couleur √† un SVG selon la plateforme
   * @param {string} svgContent - Le contenu SVG original
   * @param {string} color - La couleur hexad√©cimale
   * @param {string} platform - La plateforme
   * @returns {string} Le SVG avec la nouvelle couleur
   */
  applySvgColor(svgContent, color, platform) {
    // Strat√©gies de coloration selon la plateforme
    switch (platform) {
      case 'linkedin':
        // LinkedIn: remplacer les couleurs bleues par la nouvelle couleur
        svgContent = svgContent.replace(/#0077B5/gi, color);
        svgContent = svgContent.replace(/#0A66C2/gi, color);
        svgContent = svgContent.replace(/fill="[^"]*"/gi, `fill="${color}"`);
        break;
        
      case 'facebook':
        // Facebook: remplacer les couleurs bleues par la nouvelle couleur
        svgContent = svgContent.replace(/#1877F2/gi, color);
        svgContent = svgContent.replace(/#4267B2/gi, color);
        svgContent = svgContent.replace(/fill="[^"]*"/gi, `fill="${color}"`);
        break;
        
      case 'instagram':
        // Instagram: plus complexe car c'est un d√©grad√©, on applique une couleur unie
        svgContent = svgContent.replace(/#E4405F/gi, color);
        svgContent = svgContent.replace(/#F56040/gi, color);
        svgContent = svgContent.replace(/#FCAF45/gi, color);
        svgContent = svgContent.replace(/fill="[^"]*"/gi, `fill="${color}"`);
        // Supprimer les d√©grad√©s et utiliser une couleur unie
        svgContent = svgContent.replace(/<defs>.*?<\/defs>/gs, '');
        svgContent = svgContent.replace(/fill="url\([^)]*\)"/gi, `fill="${color}"`);
        break;
        
      case 'x':
        // X (Twitter): remplacer le noir par la nouvelle couleur
        svgContent = svgContent.replace(/#000000/gi, color);
        svgContent = svgContent.replace(/#1DA1F2/gi, color);
        svgContent = svgContent.replace(/fill="[^"]*"/gi, `fill="${color}"`);
        break;
        
      default:
        // Par d√©faut, remplacer tous les attributs fill
        svgContent = svgContent.replace(/fill="[^"]*"/gi, `fill="${color}"`);
    }

    return svgContent;
  }

  /**
   * G√©n√®re et upload une ic√¥ne sociale personnalis√©e sur Cloudflare
   * @param {string} userId - ID de l'utilisateur
   * @param {string} signatureId - ID de la signature
   * @param {string} platform - La plateforme (facebook, instagram, linkedin, x)
   * @param {string} color - La couleur hexad√©cimale
   * @returns {Promise<string>} L'URL de l'ic√¥ne upload√©e
   */
  async generateAndUploadCustomIcon(userId, signatureId, platform, color) {
    try {
      console.log(`üöÄ G√©n√©ration et upload ic√¥ne personnalis√©e ${platform} pour user ${userId}, signature ${signatureId}`);
      
      // G√©n√©rer le SVG color√©
      const coloredSvg = await this.generateColoredSvg(platform, color);
      
      // Convertir en Buffer
      const svgBuffer = Buffer.from(coloredSvg, 'utf8');
      
      // Cr√©er un nom de fichier unique
      const fileName = `${platform}-${color.replace('#', '')}.svg`;
      
      // Upload sur Cloudflare dans le dossier customSocialIcons
      const cloudflareUrl = await CloudflareService.uploadCustomSocialIcon(
        userId,
        signatureId,
        platform,
        svgBuffer,
        fileName
      );
      
      console.log(`‚úÖ Ic√¥ne personnalis√©e upload√©e: ${cloudflareUrl}`);
      return cloudflareUrl;
      
    } catch (error) {
      console.error(`‚ùå Erreur lors de la g√©n√©ration et upload de l'ic√¥ne ${platform}:`, error.message);
      throw new Error(`Impossible de g√©n√©rer l'ic√¥ne personnalis√©e ${platform}: ${error.message}`);
    }
  }

  /**
   * G√©n√®re toutes les ic√¥nes personnalis√©es pour une signature
   * @param {string} userId - ID de l'utilisateur
   * @param {string} signatureId - ID de la signature
   * @param {Object} socialColors - Objet contenant les couleurs pour chaque plateforme
   * @param {Object} socialNetworks - Objet contenant les URLs des r√©seaux sociaux
   * @returns {Promise<Object>} Objet contenant les URLs des ic√¥nes g√©n√©r√©es
   */
  async generateAllCustomIcons(userId, signatureId, socialColors, socialNetworks) {
    try {
      console.log(`üé® G√©n√©ration de toutes les ic√¥nes personnalis√©es pour signature ${signatureId}`);
      
      const customIcons = {};
      const platforms = ['facebook', 'instagram', 'linkedin', 'x'];
      
      for (const platform of platforms) {
        // Ne g√©n√©rer que si l'utilisateur a une URL pour ce r√©seau social
        if (socialNetworks[platform] && socialNetworks[platform].trim() !== '') {
          const color = socialColors[platform] || this.getDefaultColor(platform);
          
          try {
            const iconUrl = await this.generateAndUploadCustomIcon(
              userId,
              signatureId,
              platform,
              color
            );
            customIcons[platform] = iconUrl;
          } catch (error) {
            console.error(`‚ö†Ô∏è Erreur pour ${platform}:`, error.message);
            // Continuer avec les autres plateformes m√™me si une √©choue
          }
        }
      }
      
      console.log(`‚úÖ Ic√¥nes personnalis√©es g√©n√©r√©es:`, Object.keys(customIcons));
      return customIcons;
      
    } catch (error) {
      console.error(`‚ùå Erreur lors de la g√©n√©ration des ic√¥nes personnalis√©es:`, error.message);
      throw error;
    }
  }

  /**
   * Supprime toutes les ic√¥nes personnalis√©es d'une signature
   * @param {string} userId - ID de l'utilisateur
   * @param {string} signatureId - ID de la signature
   */
  async deleteCustomIcons(userId, signatureId) {
    try {
      console.log(`üóëÔ∏è Suppression des ic√¥nes personnalis√©es pour signature ${signatureId}`);
      await CloudflareService.deleteCustomSocialIcons(userId, signatureId);
      console.log(`‚úÖ Ic√¥nes personnalis√©es supprim√©es`);
    } catch (error) {
      console.error(`‚ùå Erreur lors de la suppression des ic√¥nes personnalis√©es:`, error.message);
      throw error;
    }
  }

  /**
   * Retourne la couleur par d√©faut pour une plateforme
   * @param {string} platform - La plateforme
   * @returns {string} La couleur hexad√©cimale par d√©faut
   */
  getDefaultColor(platform) {
    const defaultColors = {
      facebook: '#1877F2',
      instagram: '#E4405F',
      linkedin: '#0077B5',
      x: '#000000'
    };
    return defaultColors[platform] || '#000000';
  }
}

export default new CustomSocialIconService();
