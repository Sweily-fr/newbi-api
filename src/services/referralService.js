import User from '../models/User.js';
import StripeConnectAccount from '../models/StripeConnectAccount.js';
import ReferralEvent from '../models/ReferralEvent.js';
import logger from '../utils/logger.js';
import { transferToStripeConnect } from './stripeConnectService.js';
import { sendReferralThankYouEmail } from '../utils/mailer.js';

/**
 * Traiter le paiement de parrainage lorsqu'un filleul souscrit √† un abonnement annuel
 */
export const processReferralPayout = async (referredUserId, subscriptionId, subscriptionAmount) => {
  try {
    logger.info('üéØ D√©but traitement paiement parrainage', {
      referredUserId,
      subscriptionId,
      subscriptionAmount
    });

    // R√©cup√©rer l'utilisateur filleul
    const referredUser = await User.findById(referredUserId);
    if (!referredUser) {
      throw new Error('Utilisateur filleul non trouv√©');
    }

    // V√©rifier si l'utilisateur a √©t√© parrain√©
    if (!referredUser.referredBy) {
      logger.info('‚ùå Utilisateur non parrain√©, pas de paiement √† effectuer', {
        referredUserId
      });
      return { success: true, message: 'Utilisateur non parrain√©' };
    }

    // Trouver le parrain
    const referrer = await User.findOne({ referralCode: referredUser.referredBy });
    if (!referrer) {
      logger.error('‚ùå Parrain non trouv√©', {
        referralCode: referredUser.referredBy,
        referredUserId
      });
      throw new Error('Parrain non trouv√©');
    }

    // Chercher le compte Stripe Connect du parrain
    const stripeConnectAccount = await StripeConnectAccount.findOne({ userId: referrer._id });
    
    // V√©rifier si le parrain a un compte Stripe Connect configur√©
    if (!stripeConnectAccount || !stripeConnectAccount.chargesEnabled || !stripeConnectAccount.payoutsEnabled) {
      logger.error('‚ùå Parrain sans compte Stripe Connect configur√©', {
        referrerId: referrer._id,
        referralCode: referredUser.referredBy
      });
      
      // Cr√©er un √©v√©nement d'√©chec
      await ReferralEvent.create({
        type: 'REFERRAL_PAYOUT_FAILED',
        referrerId: referrer._id,
        referredUserId: referredUser._id,
        referralCode: referredUser.referredBy,
        amount: 50,
        subscriptionId,
        paymentStatus: 'FAILED',
        metadata: {
          reason: 'Stripe Connect non configur√©',
          subscriptionAmount
        }
      });

      throw new Error('Parrain sans compte Stripe Connect configur√©');
    }

    // V√©rifier s'il n'y a pas d√©j√† un paiement en cours pour cette souscription
    const existingEvent = await ReferralEvent.findOne({
      referredUserId: referredUser._id,
      subscriptionId,
      type: { $in: ['REFERRAL_SUBSCRIPTION', 'REFERRAL_PAYOUT'] }
    });

    if (existingEvent) {
      logger.info('‚úÖ Paiement de parrainage d√©j√† trait√©', {
        existingEventId: existingEvent._id,
        subscriptionId
      });
      return { success: true, message: 'Paiement d√©j√† trait√©' };
    }

    // Cr√©er l'√©v√©nement de souscription
    const subscriptionEvent = await ReferralEvent.createReferralSubscriptionEvent(
      referrer._id,
      referredUser._id,
      referredUser.referredBy,
      subscriptionId
    );

    logger.info('‚úÖ √âv√©nement de souscription cr√©√©', {
      eventId: subscriptionEvent._id,
      referrerId: referrer._id,
      referredUserId: referredUser._id
    });

    // Effectuer le virement de 50‚Ç¨ depuis le solde Stripe de Newbi vers le parrain
    const payoutAmount = 50; // 50‚Ç¨ fixe
    
    logger.info('üí∞ D√©but du virement de parrainage depuis le solde Newbi', {
      referrerId: referrer._id,
      referrerEmail: referrer.email,
      stripeAccountId: stripeConnectAccount.accountId,
      amount: payoutAmount,
      referredUserEmail: referredUser.email
    });
    
    const transferResult = await transferToStripeConnect(
      stripeConnectAccount.accountId,
      payoutAmount * 100, // Stripe utilise les centimes
      'eur',
      {
        description: `R√©compense parrainage Newbi - Filleul: ${referredUser.email}`,
        referralEventId: subscriptionEvent._id.toString(),
        referredUserId: referredUser._id.toString(),
        subscriptionId,
        referrerEmail: referrer.email,
        payoutType: 'referral_reward'
      }
    );

    if (!transferResult.success) {
      // Marquer l'√©v√©nement comme √©chou√©
      await ReferralEvent.updatePayoutStatus(subscriptionEvent._id, 'FAILED');
      
      logger.error('‚ùå √âchec du virement Stripe Connect', {
        error: transferResult.error,
        referrerId: referrer._id,
        amount: payoutAmount
      });
      
      throw new Error(`√âchec du virement: ${transferResult.error}`);
    }

    // Cr√©er l'√©v√©nement de paiement
    const payoutEvent = await ReferralEvent.createReferralPayoutEvent(
      referrer._id,
      referredUser._id,
      referredUser.referredBy,
      transferResult.transferId,
      payoutAmount
    );

    // Marquer l'√©v√©nement de souscription comme compl√©t√©
    await ReferralEvent.updatePayoutStatus(subscriptionEvent._id, 'COMPLETED');

    // Mettre √† jour les gains du parrain
    await User.findByIdAndUpdate(referrer._id, {
      $inc: { referralEarnings: payoutAmount }
    });

    logger.info('‚úÖ Paiement de parrainage trait√© avec succ√®s', {
      referrerId: referrer._id,
      referredUserId: referredUser._id,
      amount: payoutAmount,
      transferId: transferResult.transferId,
      payoutEventId: payoutEvent._id
    });

    // Envoyer un email de remerciement au parrain (asynchrone)
    setTimeout(async () => {
      try {
        await sendReferralThankYouEmail(referrer, referredUser, payoutAmount);
        logger.info('‚úÖ Email de remerciement envoy√© au parrain', {
          referrerId: referrer._id,
          referrerEmail: referrer.email
        });
      } catch (emailError) {
        logger.error('‚ùå Erreur envoi email remerciement parrain:', emailError);
      }
    }, 1000);

    return {
      success: true,
      message: 'Paiement de parrainage trait√© avec succ√®s',
      transferId: transferResult.transferId,
      amount: payoutAmount,
      referrer: {
        id: referrer._id,
        email: referrer.email,
        referralCode: referrer.referralCode
      }
    };

  } catch (error) {
    logger.error('‚ùå Erreur traitement paiement parrainage:', error);
    throw error;
  }
};

/**
 * Cr√©er un √©v√©nement d'inscription de parrainage
 */
export const createReferralSignupEvent = async (referrerId, referredUserId, referralCode) => {
  try {
    const event = await ReferralEvent.createReferralSignupEvent(
      referrerId,
      referredUserId,
      referralCode
    );

    logger.info('‚úÖ √âv√©nement d\'inscription de parrainage cr√©√©', {
      eventId: event._id,
      referrerId,
      referredUserId,
      referralCode
    });

    return event;
  } catch (error) {
    logger.error('‚ùå Erreur cr√©ation √©v√©nement inscription parrainage:', error);
    throw error;
  }
};

/**
 * V√©rifier et traiter les parrainages en attente pour un utilisateur
 */
export const checkPendingReferrals = async (userId) => {
  try {
    const user = await User.findById(userId);
    if (!user || !user.referredBy) {
      return { success: true, message: 'Aucun parrainage en attente' };
    }

    // V√©rifier si l'utilisateur a un abonnement annuel actif
    const hasAnnualSubscription = user.subscription && 
                                 user.subscription.status === 'active' &&
                                 user.subscription.interval === 'year';

    if (!hasAnnualSubscription) {
      logger.info('üîç Utilisateur parrain√© sans abonnement annuel', {
        userId,
        subscriptionStatus: user.subscription?.status,
        subscriptionInterval: user.subscription?.interval
      });
      return { success: true, message: 'Pas d\'abonnement annuel' };
    }

    // Traiter le paiement de parrainage
    const result = await processReferralPayout(
      userId,
      user.subscription.stripeSubscriptionId || 'manual',
      user.subscription.amount || 0
    );

    return result;
  } catch (error) {
    logger.error('‚ùå Erreur v√©rification parrainages en attente:', error);
    throw error;
  }
};

/**
 * Programmer un paiement de parrainage avec d√©lai de 7 jours
 */
export const scheduleReferralPayout = async (userId, subscriptionId, invoiceAmount) => {
  try {
    logger.info('üìÖ Programmation du paiement de parrainage avec d√©lai de 7 jours', {
      userId,
      subscriptionId,
      invoiceAmount
    });

    // R√©cup√©rer l'utilisateur et son parrain
    const user = await User.findById(userId);
    if (!user || !user.referredBy) {
      logger.error('‚ùå Utilisateur non trouv√© ou non parrain√©', { userId });
      return;
    }

    const referrer = await User.findOne({ referralCode: user.referredBy });
    if (!referrer) {
      logger.error('‚ùå Parrain non trouv√©', { referralCode: user.referredBy });
      return;
    }

    // Calculer la date d'ex√©cution (7 jours apr√®s maintenant)
    const scheduledFor = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000);

    // Cr√©er l'√©v√©nement de parrainage programm√©
    const referralEvent = await ReferralEvent.create({
      type: 'REFERRAL_PAYOUT',
      referrerId: referrer._id,
      referredUserId: user._id,
      referralCode: user.referredBy,
      amount: 50, // Montant fixe de 50‚Ç¨
      currency: 'EUR',
      paymentStatus: 'SCHEDULED',
      scheduledFor: scheduledFor,
      subscriptionId: subscriptionId,
      metadata: {
        invoiceAmount: invoiceAmount,
        scheduledDate: scheduledFor.toISOString()
      }
    });

    logger.info('‚úÖ Paiement de parrainage programm√© avec succ√®s', {
      eventId: referralEvent._id,
      referrerId: referrer._id,
      referredUserId: user._id,
      amount: 50,
      scheduledFor: scheduledFor.toISOString(),
      daysDelay: 7
    });

    // L'email sera envoy√© lors du traitement r√©el du paiement apr√®s 7 jours
    logger.info('üìß Email de remerciement sera envoy√© lors du traitement du paiement', {
      referrerId: referrer._id,
      referrerEmail: referrer.email,
      scheduledFor: scheduledFor.toISOString()
    });

    return referralEvent;

  } catch (error) {
    logger.error('‚ùå Erreur lors de la programmation du paiement de parrainage', {
      error: error.message,
      userId,
      subscriptionId
    });
    throw error;
  }
};
