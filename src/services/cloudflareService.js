/**
 * Service pour g√©rer l'upload et la r√©cup√©ration d'images sur Cloudflare R2
 */

import {
  S3Client,
  PutObjectCommand,
  GetObjectCommand,
  DeleteObjectCommand,
} from "@aws-sdk/client-s3";
import { getSignedUrl } from "@aws-sdk/s3-request-presigner";
import path from "path";
import { v4 as uuidv4 } from "uuid";
import dotenv from "dotenv";
import crypto from "crypto";

// Charger les variables d'environnement
dotenv.config();

class CloudflareService {
  constructor() {
    // Configuration Cloudflare R2 (compatible S3) - utilise les variables AWS existantes
    this.client = new S3Client({
      region: "auto",
      endpoint: process.env.AWS_S3_API_URL,
      credentials: {
        accessKeyId: process.env.AWS_ACCESS_KEY_ID,
        secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
      },
    });

    this.bucketName = process.env.IMAGE_BUCKET_NAME;
    this.publicUrl = process.env.IMAGE_PUBLIC_URL; // URL publique de votre domaine custom
    
    // Configuration sp√©cifique pour l'OCR
    this.ocrBucketName = process.env.IMAGE_OCR_BUCKET_NAME;
    this.ocrPublicUrl = process.env.IMAGE_OCR_PUBLIC_URL;
    
    // Configuration sp√©cifique pour les images d'entreprise
    this.companyBucketName = process.env.AWS_S3_BUCKET_NAME_IMG_COMPANY;
    this.companyPublicUrl = process.env.COMPANY_IMAGES_PUBLIC_URL;
    
    // Configuration sp√©cifique pour les images de profil
    this.profileBucketName = process.env.AWS_S3_BUCKET_NAME_IMG_PROFILE;
    this.profilePublicUrl = process.env.AWS_S3_API_URL_PROFILE || "https://pub-012a0ee1541743df9b78b220e9efac5e.r2.dev";
    
    console.log('üîß CloudflareService - Variables profil:');
    console.log('   AWS_S3_BUCKET_NAME_IMG_PROFILE:', process.env.AWS_S3_BUCKET_NAME_IMG_PROFILE);
    console.log('   AWS_S3_API_URL_PROFILE:', process.env.AWS_S3_API_URL_PROFILE);
    console.log('   this.profilePublicUrl apr√®s init:', this.profilePublicUrl);

    if (!this.bucketName) {
      console.error("‚ùå ERREUR: IMAGE_BUCKET_NAME n'est pas d√©finie!");
      throw new Error("Configuration manquante: IMAGE_BUCKET_NAME");
    }
  }

  /**
   * Nettoie un nom de fichier pour les headers HTTP
   * @param {string} fileName - Nom original du fichier
   * @returns {string} - Nom de fichier nettoy√©
   */
  sanitizeFileName(fileName) {
    if (!fileName) return "unknown";

    // Remplacer les caract√®res probl√©matiques par des underscores
    // et garder seulement les caract√®res alphanum√©riques, points, tirets et underscores
    return fileName
      .replace(/[^a-zA-Z0-9._-]/g, "_")
      .replace(/_+/g, "_") // Remplacer les underscores multiples par un seul
      .replace(/^_|_$/g, "") // Supprimer les underscores en d√©but/fin
      .substring(0, 100); // Limiter la longueur
  }

  /**
   * Upload une image vers Cloudflare R2
   * @param {Buffer} fileBuffer - Buffer de l'image
   * @param {string} fileName - Nom original du fichier
   * @param {string} userId - ID de l'utilisateur
   * @param {string} imageType - Type d'image ('profile' ou 'company')
   * @returns {Promise<{key: string, url: string}>}
   */
  async uploadImage(fileBuffer, fileName, userId, imageType = "profile", organizationId = null) {
    try {
      // G√©n√©rer une cl√© unique pour l'image
      const fileExtension = path.extname(fileName).toLowerCase();
      const uniqueId = crypto.randomUUID();
      
      // D√©terminer le chemin selon le type de fichier
      console.log('üîç CloudflareService - imageType re√ßu:', imageType);
      let key;
      switch (imageType) {
        case 'ocr': {
          // Pour les re√ßus OCR, organiser par organisation (ID organisation uniquement)
          if (!organizationId) {
            throw new Error('Organization ID requis pour les uploads OCR');
          }
          console.log('üè¢ CloudflareService - Organization ID pour OCR:', organizationId);
          key = `${organizationId}/${uniqueId}${fileExtension}`;
          break;
        }
        case 'imgCompany': {
          // Pour les logos d'entreprise
          const orgId = organizationId || userId;
          key = `${orgId}/company/${uniqueId}${fileExtension}`;
          break;
        }
        case 'documents': {
          // Pour les documents g√©n√©raux
          key = `documents/${userId}/${uniqueId}${fileExtension}`;
          break;
        }
        case 'profile': {
          // Pour les images de profil - sans pr√©fixe signatures/
          key = `${userId}/image/${uniqueId}${fileExtension}`;
          break;
        }
        default: {
          // Pour les signatures et autres (comportement par d√©faut)
          key = `signatures/${userId}/${imageType}/${uniqueId}${fileExtension}`;
          break;
        }
      }

      console.log('üìÅ CloudflareService - Cl√© g√©n√©r√©e:', key);

      // D√©terminer le bucket et l'URL publique selon le type
      let targetBucket, targetPublicUrl;
      if (imageType === 'ocr') {
        targetBucket = this.ocrBucketName || this.bucketName;
        targetPublicUrl = this.ocrPublicUrl || this.publicUrl;
        console.log('ü™£ CloudflareService - Utilisation bucket OCR:', targetBucket);
      } else if (imageType === 'imgCompany') {
        targetBucket = this.companyBucketName || this.bucketName;
        targetPublicUrl = this.companyPublicUrl || this.publicUrl;
        console.log('ü™£ CloudflareService - Utilisation bucket entreprise:', targetBucket);
      } else if (imageType === 'profile') {
        targetBucket = this.profileBucketName || this.bucketName;
        targetPublicUrl = this.profilePublicUrl || "https://pub-012a0ee1541743df9b78b220e9efac5e.r2.dev";
        console.log('ü™£ CloudflareService - Utilisation bucket profil:', targetBucket);
        console.log('üåê CloudflareService - URL publique profil:', targetPublicUrl);
      } else {
        targetBucket = this.bucketName;
        targetPublicUrl = this.publicUrl;
        console.log('ü™£ CloudflareService - Utilisation bucket standard:', targetBucket);
      }

      // D√©terminer le content-type
      const contentType = this.getContentType(fileExtension);

      // Nettoyer le nom de fichier pour les headers HTTP
      const sanitizedFileName = this.sanitizeFileName(fileName);

      // Commande d'upload
      const command = new PutObjectCommand({
        Bucket: targetBucket,
        Key: key,
        Body: fileBuffer,
        ContentType: contentType,
        Metadata: {
          userId: userId,
          imageType: imageType,
          originalName: sanitizedFileName, // Utiliser le nom nettoy√©
          uploadedAt: new Date().toISOString(),
        },
      });

      await this.client.send(command);

      // G√©n√©rer l'URL appropri√©e selon la configuration
      let imageUrl;

      // Utilisation directe des URLs publiques Cloudflare R2
      if (
        targetPublicUrl &&
        targetPublicUrl !== "https://your_image_bucket_public_url"
      ) {
        // √âviter les doubles barres obliques
        const cleanUrl = targetPublicUrl.endsWith('/') ? targetPublicUrl.slice(0, -1) : targetPublicUrl;
        imageUrl = `${cleanUrl}/${key}`;
        console.log('üåê CloudflareService - URL g√©n√©r√©e:', imageUrl);
      } else {
        // Fallback sur le proxy backend si pas d'URL publique configur√©e

        const keyParts = key.split("/");
        if (keyParts.length >= 3 && keyParts[0] === "signatures") {
          const userId = keyParts[1];
          const imageType = keyParts[2];
          const filename = keyParts.slice(3).join("/");

          const baseUrl = process.env.BACKEND_URL || "http://localhost:4000";
          imageUrl = `${baseUrl}/api/images/${userId}/${imageType}/${filename}`;
        } else {
          // Dernier fallback sur URL sign√©e avec le bon bucket
          console.log('üîê CloudflareService - Fallback URL sign√©e, bucket:', targetBucket);
          imageUrl = await this.getSignedUrlForBucket(key, targetBucket, 86400);
        }
      }

      return {
        key,
        url: imageUrl,
        contentType,
      };
    } catch (error) {
      console.error("Erreur upload Cloudflare:", error);
      throw new Error(`√âchec de l'upload vers Cloudflare: ${error.message}`);
    }
  }

  /**
   * Upload un logo social vers le bucket logo-rs
   * @param {Buffer} fileBuffer - Buffer de l'image
   * @param {string} fileName - Nom original du fichier
   * @param {string} logoType - Type de logo ('facebook', 'linkedin', etc.)
   * @param {string} color - Couleur du logo
   * @returns {Promise<{key: string, url: string}>}
   */
  async uploadSocialLogo(fileBuffer, fileName, logoType, color) {
    try {
      // Configuration sp√©cifique pour le bucket logo-rs
      const logoBucketName = process.env.LOGO_BUCKET_NAME || "logo-rs";
      const logoPublicUrl = process.env.LOGO_PUBLIC_URL;

      // Cr√©er un client S3 sp√©cifique pour les logos (m√™me config mais diff√©rent bucket)
      const logoClient = new S3Client({
        region: "auto",
        endpoint: process.env.AWS_S3_API_URL,
        credentials: {
          accessKeyId: process.env.AWS_ACCESS_KEY_ID,
          secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
        },
      });

      // G√©n√©rer une cl√© unique pour le logo social
      const fileExtension = path.extname(fileName).toLowerCase();
      const timestamp = Date.now();
      const colorHash = color.replace("#", "");
      const key = `social-logos/${logoType}/${colorHash}/${timestamp}${fileExtension}`;

      // D√©terminer le content-type
      const contentType = this.getContentType(fileExtension);

      // Commande d'upload vers le bucket logo-rs
      const command = new PutObjectCommand({
        Bucket: logoBucketName,
        Key: key,
        Body: fileBuffer,
        ContentType: contentType,
        CacheControl: "public, max-age=31536000", // Cache 1 an
        Metadata: {
          logoType: logoType,
          color: color,
          uploadedAt: new Date().toISOString(),
        },
      });

      await logoClient.send(command);

      // G√©n√©rer l'URL publique
      let imageUrl;
      if (logoPublicUrl) {
        imageUrl = `${logoPublicUrl}/${key}`;
      } else {
        // Fallback sur URL sign√©e si pas d'URL publique
        imageUrl = await this.getSignedUrl(key, 86400);
      }

      return {
        key,
        url: imageUrl,
        contentType,
      };
    } catch (error) {
      console.error("Erreur upload logo social:", error);
      throw new Error(`√âchec de l'upload du logo social: ${error.message}`);
    }
  }

  /**
   * R√©cup√®re l'URL d'une image (publique ou sign√©e selon la configuration)
   * @param {string} key - Cl√© de l'image dans R2
   * @param {number} expiresIn - Dur√©e de validit√© en secondes pour URL sign√©e (d√©faut: 24h)
   * @returns {Promise<string>}
   */
  async getImageUrl(key, expiresIn = 86400) {
    if (!key) return null;

    console.log('üîç CloudflareService - getImageUrl appel√©e avec key:', key);

    // D√©terminer l'URL publique appropri√©e selon le type d'image
    let targetPublicUrl = process.env.AWS_R2_PUBLIC_URL;

    // Analyser la cl√© pour d√©terminer le type d'image
    const keyParts = key.split("/");
    
    if (keyParts.length >= 2 && keyParts[1] === "image") {
      // Format: userId/image/filename -> Image de profil
      targetPublicUrl = process.env.AWS_S3_API_URL_PROFILE;
      console.log('üë§ CloudflareService - Image de profil d√©tect√©e');
      console.log('üåê CloudflareService - URL publique profil:', targetPublicUrl);
      console.log('üîç CloudflareService - Variable env AWS_S3_API_URL_PROFILE:', process.env.AWS_S3_API_URL_PROFILE);
    } else if (keyParts.length >= 2 && keyParts[1] === "company") {
      // Format: userId/company/filename -> Image d'entreprise
      targetPublicUrl = process.env.COMPANY_IMAGES_PUBLIC_URL;
      console.log('üè¢ CloudflareService - Image d\'entreprise d√©tect√©e');
    } else if (keyParts.length >= 1 && !key.includes("signatures")) {
      // Format: orgId/filename -> Image OCR
      targetPublicUrl = process.env.IMAGE_OCR_PUBLIC_URL;
      console.log('üìÑ CloudflareService - Image OCR d√©tect√©e');
    } else if (key.includes("signatures")) {
      // Format signatures/userId/type/filename -> Image signature
      targetPublicUrl = process.env.IMAGE_PUBLIC_URL;
      console.log('‚úçÔ∏è CloudflareService - Image signature d√©tect√©e');
    }

    if (
      targetPublicUrl &&
      targetPublicUrl !== "your_r2_public_url" &&
      targetPublicUrl !== undefined
    ) {
      // Si URL publique configur√©e, utiliser l'URL publique directe
      const finalUrl = `${targetPublicUrl}/${key}`;
      console.log('üåê CloudflareService - URL finale g√©n√©r√©e:', finalUrl);
      return finalUrl;
    } else {
      // Sinon, g√©n√©rer une URL sign√©e temporaire avec le bon bucket
      console.log('üîê CloudflareService - Fallback sur URL sign√©e');
      console.log('üîç CloudflareService - targetPublicUrl √©tait:', targetPublicUrl);
      
      // D√©terminer le bon bucket pour l'URL sign√©e
      let targetBucket = this.bucketName;
      if (keyParts.length >= 2 && keyParts[1] === "image") {
        targetBucket = this.profileBucketName || this.bucketName;
      } else if (keyParts.length >= 2 && keyParts[1] === "company") {
        targetBucket = this.companyBucketName || this.bucketName;
      } else if (keyParts.length >= 1 && !key.includes("signatures")) {
        targetBucket = this.ocrBucketName || this.bucketName;
      }
      
      console.log('ü™£ CloudflareService - Bucket pour URL sign√©e:', targetBucket);
      return await this.getSignedUrlForBucket(key, targetBucket, expiresIn);
    }
  }

  /**
   * G√©n√®re une URL sign√©e temporaire pour l'acc√®s priv√©
   * @param {string} key - Cl√© de l'image
   * @param {number} expiresIn - Dur√©e de validit√© en secondes (d√©faut: 1h)
   * @returns {Promise<string>}
   */
  async getSignedUrl(key, expiresIn = 3600) {
    return await this.getSignedUrlForBucket(key, this.bucketName, expiresIn);
  }

  /**
   * G√©n√®re une URL sign√©e temporaire pour un bucket sp√©cifique
   * @param {string} key - Cl√© de l'image
   * @param {string} bucketName - Nom du bucket √† utiliser
   * @param {number} expiresIn - Dur√©e de validit√© en secondes (d√©faut: 1h)
   * @returns {Promise<string>}
   */
  async getSignedUrlForBucket(key, bucketName, expiresIn = 3600) {
    try {
      console.log(`üîê CloudflareService - G√©n√©ration URL sign√©e pour bucket: ${bucketName}, key: ${key}`);
      
      const command = new GetObjectCommand({
        Bucket: bucketName,
        Key: key,
      });

      const signedUrl = await getSignedUrl(this.client, command, {
        expiresIn,
        // Ajouter des param√®tres sp√©cifiques √† Cloudflare R2
        signableHeaders: new Set(["host"]),
        unhoistableHeaders: new Set(["x-amz-content-sha256"]),
      });

      console.log(`üåê CloudflareService - URL sign√©e g√©n√©r√©e: ${signedUrl.substring(0, 100)}...`);
      return signedUrl;
    } catch (error) {
      console.error("Erreur g√©n√©ration URL sign√©e:", error);
      throw new Error(`√âchec de la g√©n√©ration d'URL sign√©e: ${error.message}`);
    }
  }

  /**
   * Supprime une image de Cloudflare R2
   * @param {string} key - Cl√© de l'image √† supprimer
   * @returns {Promise<boolean>}
   */
  async deleteImage(key) {
    try {
      const command = new DeleteObjectCommand({
        Bucket: this.bucketName,
        Key: key,
      });

      await this.client.send(command);
      return true;
    } catch (error) {
      console.error("Erreur suppression Cloudflare:", error);
      throw new Error(`√âchec de la suppression: ${error.message}`);
    }
  }

  /**
   * D√©termine le content-type bas√© sur l'extension
   * @param {string} extension - Extension du fichier
   * @returns {string}
   */
  getContentType(extension) {
    const mimeTypes = {
      ".jpg": "image/jpeg",
      ".jpeg": "image/jpeg",
      ".png": "image/png",
      ".gif": "image/gif",
      ".webp": "image/webp",
      ".svg": "image/svg+xml",
      ".pdf": "application/pdf", // Support des PDF
      ".tiff": "image/tiff",
      ".tif": "image/tiff",
      ".bmp": "image/bmp",
    };

    return mimeTypes[extension] || "application/octet-stream";
  }

  /**
   * Valide si le fichier est une image support√©e
   * @param {string} fileName - Nom du fichier
   * @returns {boolean}
   */
  isValidImageFile(fileName) {
    const validExtensions = [".jpg", ".jpeg", ".png", ".gif", ".webp"];
    const extension = path.extname(fileName).toLowerCase();
    return validExtensions.includes(extension);
  }

  /**
   * Valide la taille du fichier (max 5MB pour les signatures)
   * @param {Buffer} fileBuffer - Buffer du fichier
   * @returns {boolean}
   */
  isValidFileSize(fileBuffer) {
    const maxSize = 5 * 1024 * 1024; // 5MB
    return fileBuffer.length <= maxSize;
  }
}

// Instance singleton
const cloudflareService = new CloudflareService();

export default cloudflareService;
