import express from "express";
import crypto from "crypto";
import { bankingService } from "../services/banking/index.js";
import logger from "../utils/logger.js";

const router = express.Router();

// Middleware pour capturer le body brut pour la v√©rification de signature
const rawBodyParser = express.raw({ type: "application/json" });

// Fonction pour v√©rifier la signature du webhook Bridge
const verifyBridgeSignature = (payload, signature, secret) => {
  try {
    // Bridge utilise le format "v1=SIGNATURE"
    const actualSignature = signature.startsWith("v1=")
      ? signature.slice(3)
      : signature;

    const expectedSignature = crypto
      .createHmac("sha256", secret)
      .update(payload)
      .digest("hex")
      .toUpperCase(); // Bridge utilise des majuscules

    // Comparaison simple pour √©viter l'erreur de longueur
    return actualSignature.toUpperCase() === expectedSignature;
  } catch (error) {
    console.error("‚ùå Erreur lors de la v√©rification de signature:", error);
    return false;
  }
};

// Endpoint webhook Bridge
router.post("/bridge", rawBodyParser, async (req, res) => {
  try {
    const signature = req.headers["bridgeapi-signature"];
    const webhookSecret = process.env.BRIDGE_WEBHOOK_SECRET;

    if (!webhookSecret) {
      console.error("‚ùå BRIDGE_WEBHOOK_SECRET non configur√©");
      return res.status(500).json({ error: "Webhook secret not configured" });
    }

    // V√©rifier la signature si elle est pr√©sente
    if (signature && webhookSecret) {
      const isValidSignature = verifyBridgeSignature(
        req.body,
        signature,
        webhookSecret
      );
      if (!isValidSignature) {
        console.error("‚ùå Signature webhook invalide");
        return res.status(401).json({ error: "Invalid webhook signature" });
      }
      console.log("‚úÖ Signature webhook valide");
    }

    // Parser le JSON selon le type de body
    let payload;
    if (Buffer.isBuffer(req.body)) {
      payload = JSON.parse(req.body.toString());
    } else if (typeof req.body === "string") {
      payload = JSON.parse(req.body);
    } else {
      // Si c'est d√©j√† un objet, l'utiliser directement
      payload = req.body;
    }

    // Log des informations importantes
    // if (payload.type) {
    //   console.log(`üéØ Type d'√©v√©nement: ${payload.type}`);
    // }

    // if (payload.data) {
    //   console.log("üìä Donn√©es:", JSON.stringify(payload.data, null, 2));
    // }

    // if (payload.account) {
    //   console.log(`üè¶ Compte: ${payload.account.name} (${payload.account.id})`);
    // }

    // if (payload.item) {
    //   console.log(`üí≥ Item: ${payload.item.id} - ${payload.item.status}`);
    // }

    // Traitement selon le type d'√©v√©nement
    switch (payload.type) {
      case "TEST_EVENT":
        break;
      case "account.connected":
        await handleAccountConnected(payload);
        break;
      case "account.disconnected":
        break;
      case "item.refreshed":
      case "item.account.updated":
      case "item.account.created":
      case "account.connected":
      case "transaction.created":
      case "transaction.updated":
        await handleTransactionEvent(payload);
        break;
      default:
        console.log(`‚ùì Type d'√©v√©nement non g√©r√©: ${payload.type}`);
    }

    // R√©pondre avec succ√®s
    res.status(200).json({
      success: true,
      message: "Webhook re√ßu et trait√©",
      timestamp: new Date().toISOString(),
    });
  } catch (error) {
    console.error("‚ùå Erreur lors du traitement du webhook:", error);
    res.status(500).json({
      error: "Internal server error",
      message: error.message,
    });
  }
});

// Endpoint de test pour v√©rifier que le webhook fonctionne
router.get("/bridge/test", (req, res) => {
  res.json({
    message: "Webhook endpoint is working",
    timestamp: new Date().toISOString(),
    webhookUrl: process.env.BRIDGE_WEBHOOK_URL,
    hasSecret: !!process.env.BRIDGE_WEBHOOK_SECRET,
  });
});

// Fonctions de gestion des √©v√©nements webhook
async function handleAccountConnected(payload) {
  try {
    const userUuid = payload.content?.user_uuid;
    if (!userUuid) return;

    await triggerSyncForUser(userUuid);
  } catch (error) {
    console.error("‚ùå Erreur handleAccountConnected:", error.message);
  }
}

async function handleItemRefreshed(payload) {
  try {
    const userUuid = payload.content?.user_uuid;
    if (!userUuid) return;

    await triggerSyncForUser(userUuid);
  } catch (error) {
    console.error("‚ùå Erreur handleItemRefreshed:", error.message);
  }
}

async function handleAccountUpdated(payload) {
  try {
    const userUuid = payload.content?.user_uuid;
    const accountId = payload.content?.account_id;
    const nbNewTransactions = payload.content?.nb_new_transactions || 0;
    const nbUpdatedTransactions = payload.content?.nb_updated_transactions || 0;

    if (!userUuid) return;

    await triggerSyncForUser(userUuid, accountId);
  } catch (error) {
    console.error("‚ùå Erreur handleAccountUpdated:", error.message);
  }
}

async function handleTransactionEvent(payload) {
  try {
    const userUuid = payload.content?.user_uuid;
    const accountId = payload.content?.account_id;

    if (!userUuid) return;

    await triggerSyncForUser(userUuid, accountId);
  } catch (error) {
    console.error("‚ùå Erreur handleTransactionEvent:", error.message);
  }
}

async function triggerSyncForUser(userUuid, specificAccountId = null) {
  try {
    // Initialiser le service banking
    await bankingService.initialize("bridge");
    const provider = bankingService.currentProvider;

    // Trouver le workspace correspondant au user_uuid Bridge
    const workspaceId = await findWorkspaceByBridgeUuid(userUuid);
    if (!workspaceId) {
      console.error("‚ùå Workspace non trouv√© pour user_uuid:", userUuid);
      return;
    }

    // Utiliser un userId fictif pour la synchronisation (sera am√©lior√©)
    const userId = "webhook-sync";

    if (specificAccountId) {
      // Synchroniser un compte sp√©cifique

      await provider.getTransactions(specificAccountId, userId, workspaceId, {
        limit: 100,
      });
    } else {
      // Synchronisation compl√®te
      const result = await provider.syncAllTransactions(userId, workspaceId, {
        limit: 100,
      });
    }
  } catch (error) {
    console.error("‚ùå Erreur synchronisation webhook:", error.message);
  }
}

async function findWorkspaceByBridgeUuid(userUuid) {
  try {
    // Initialiser le service banking pour r√©cup√©rer l'utilisateur
    await bankingService.initialize("bridge");
    const provider = bankingService.currentProvider;

    // R√©cup√©rer l'utilisateur Bridge par UUID pour obtenir son external_user_id
    const bridgeUser = await provider.getBridgeUserByUuid(userUuid);

    if (bridgeUser && bridgeUser.external_user_id) {
      return bridgeUser.external_user_id;
    } else {
      console.error("‚ùå external_user_id non trouv√© pour user_uuid:", userUuid);
      return null;
    }
  } catch (error) {
    console.error("‚ùå Erreur recherche workspace:", error.message);
    return null;
  }
}

export default router;
