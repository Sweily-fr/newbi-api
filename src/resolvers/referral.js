import User from '../models/User.js';
import ReferralEvent from '../models/ReferralEvent.js';
import logger from '../utils/logger.js';
import { v4 as uuidv4 } from 'uuid';
import { createConnectAccount, generateOnboardingLink } from '../services/stripeConnectService.js';

const referralResolvers = {
  Mutation: {
    // G√©n√©rer un code de parrainage unique pour l'utilisateur
    generateReferralCode: async (_, __, { user }) => {
      try {
        if (!user) {
          throw new Error('Utilisateur non authentifi√©');
        }

        // V√©rifier que l'utilisateur a un abonnement actif
        if (!user.subscription || !user.subscription.licence) {
          throw new Error('Un abonnement actif est requis pour parrainer');
        }

        // V√©rifier si l'utilisateur a d√©j√† un code de parrainage
        if (user.referralCode) {
          return {
            success: true,
            message: 'Code de parrainage r√©cup√©r√©',
            referralCode: user.referralCode
          };
        }

        // G√©n√©rer un code unique
        let referralCode;
        let isUnique = false;
        let attempts = 0;
        const maxAttempts = 10;

        while (!isUnique && attempts < maxAttempts) {
          // G√©n√©rer un code court et lisible
          referralCode = uuidv4().substring(0, 8).toUpperCase();
          
          // V√©rifier l'unicit√©
          const existingUser = await User.findOne({ referralCode });
          if (!existingUser) {
            isUnique = true;
          }
          attempts++;
        }

        if (!isUnique) {
          throw new Error('Impossible de g√©n√©rer un code unique, veuillez r√©essayer');
        }

        // Sauvegarder le code
        await User.findByIdAndUpdate(user._id, { referralCode });

        logger.info('‚úÖ Code de parrainage g√©n√©r√©', {
          userId: user._id,
          referralCode,
          userEmail: user.email
        });

        return {
          success: true,
          message: 'Code de parrainage g√©n√©r√© avec succ√®s',
          referralCode,
          referralLink: null
        };

      } catch (error) {
        logger.error('‚ùå Erreur g√©n√©ration code parrainage:', error);
        return {
          success: false,
          message: error.message || 'Erreur lors de la g√©n√©ration du code de parrainage',
          referralCode: null,
          referralLink: null
        };
      }
    },

    // G√©n√©rer un lien de parrainage complet
    generateReferralLink: async (_, __, { user }) => {
      try {
        if (!user) {
          throw new Error('Utilisateur non authentifi√©');
        }

        // V√©rifier que l'utilisateur a un abonnement actif
        if (!user.subscription || !user.subscription.licence) {
          throw new Error('Un abonnement actif est requis pour parrainer');
        }

        // G√©n√©rer ou r√©cup√©rer le code de parrainage
        let referralCode = user.referralCode;
        
        if (!referralCode) {
          // G√©n√©rer un code unique
          let isUnique = false;
          let attempts = 0;
          const maxAttempts = 10;

          while (!isUnique && attempts < maxAttempts) {
            referralCode = uuidv4().substring(0, 8).toUpperCase();
            
            const existingUser = await User.findOne({ referralCode });
            if (!existingUser) {
              isUnique = true;
            }
            attempts++;
          }

          if (!isUnique) {
            throw new Error('Impossible de g√©n√©rer un code unique, veuillez r√©essayer');
          }

          // Sauvegarder le code
          await User.findByIdAndUpdate(user._id, { referralCode });
        }

        // G√©n√©rer le lien complet
        const baseUrl = process.env.FRONTEND_URL || 'https://newbi.fr';
        const referralLink = `${baseUrl}/register?ref=${referralCode}`;

        logger.info('‚úÖ Lien de parrainage g√©n√©r√©', {
          userId: user._id,
          referralCode,
          referralLink,
          userEmail: user.email
        });

        return {
          success: true,
          message: 'Lien de parrainage g√©n√©r√© avec succ√®s',
          referralCode,
          referralLink
        };

      } catch (error) {
        logger.error('‚ùå Erreur g√©n√©ration lien parrainage:', error);
        return {
          success: false,
          message: error.message || 'Erreur lors de la g√©n√©ration du lien de parrainage',
          referralCode: null,
          referralLink: null
        };
      }
    },

    // V√©rifier le statut Stripe Connect pour le parrainage
    checkStripeConnectForReferral: async (_, __, { user }) => {
      logger.info('üîç D√©but checkStripeConnectForReferral', { userId: user?._id });
      try {
        if (!user) {
          return {
            success: false,
            message: 'Utilisateur non authentifi√©',
            isConnected: false,
            canReceivePayments: false,
            onboardingUrl: null
          };
        }

        // V√©rifier que l'utilisateur a un abonnement actif
        if (!user.subscription || !user.subscription.licence) {
          return {
            success: false,
            message: 'Un abonnement actif est requis pour parrainer',
            isConnected: false,
            canReceivePayments: false,
            onboardingUrl: null
          };
        }

        // V√©rifier si l'utilisateur a d√©j√† un compte Stripe Connect
        const stripeAccount = user.stripeConnectAccount;
        
        if (!stripeAccount || !stripeAccount.accountId) {
          // Cr√©er un compte Stripe Connect
          const accountResult = await createConnectAccount(user._id);
          
          if (!accountResult.success) {
            return {
              success: false,
              message: accountResult.message || 'Erreur lors de la cr√©ation du compte Stripe',
              isConnected: false,
              canReceivePayments: false,
              onboardingUrl: null
            };
          }

          // G√©n√©rer le lien d'onboarding
          const returnUrl = `${process.env.FRONTEND_URL || 'https://newbi.fr'}/dashboard?stripe_success=true`;
          const onboardingResult = await generateOnboardingLink(
            accountResult.accountId,
            returnUrl
          );

          if (!onboardingResult.success) {
            return {
              success: false,
              message: onboardingResult.message || 'Erreur lors de la g√©n√©ration du lien Stripe',
              isConnected: false,
              canReceivePayments: false,
              onboardingUrl: null
            };
          }

          return {
            success: true,
            message: 'Configuration Stripe requise',
            isConnected: false,
            canReceivePayments: false,
            onboardingUrl: onboardingResult.url
          };
        }

        // V√©rifier le statut du compte existant
        const isConnected = !!stripeAccount.accountId;
        const canReceivePayments = stripeAccount.chargesEnabled || false;

        if (isConnected && !canReceivePayments) {
          // G√©n√©rer un nouveau lien d'onboarding pour finaliser la configuration
          const returnUrl = `${process.env.FRONTEND_URL || 'https://newbi.fr'}/dashboard?stripe_success=true`;
          const onboardingResult = await generateOnboardingLink(
            stripeAccount.accountId,
            returnUrl
          );

          return {
            success: true,
            message: 'Finalisation de la configuration Stripe requise',
            isConnected: true,
            canReceivePayments: false,
            onboardingUrl: onboardingResult.success ? onboardingResult.url : null
          };
        }

        return {
          success: true,
          message: canReceivePayments ? 'Stripe Connect configur√©' : 'Configuration Stripe incompl√®te',
          isConnected,
          canReceivePayments,
          onboardingUrl: null
        };

      } catch (error) {
        logger.error('‚ùå Erreur v√©rification Stripe Connect parrainage:', error);
        logger.error('‚ùå Stack trace:', error.stack);
        
        // S'assurer qu'on retourne toujours une r√©ponse valide
        return {
          success: false,
          message: error.message || 'Erreur lors de la v√©rification Stripe Connect',
          isConnected: false,
          canReceivePayments: false,
          onboardingUrl: null
        };
      }
    },

    // Traiter le virement de parrainage (appel√© par le webhook)
    processReferralPayment: async (_, { referralId, amount }) => {
      try {
        // Cette mutation sera appel√©e par le syst√®me webhook
        // Pour l'instant, juste un placeholder
        logger.info('üîÑ Traitement virement parrainage', {
          referralId,
          amount
        });

        return {
          success: true,
          message: 'Virement de parrainage trait√©',
          transferId: null
        };

      } catch (error) {
        logger.error('‚ùå Erreur traitement virement parrainage:', error);
        return {
          success: false,
          message: error.message || 'Erreur lors du traitement du virement',
          transferId: null
        };
      }
    }
  },

  Query: {
    // R√©cup√©rer les statistiques de parrainage de l'utilisateur
    getReferralStats: async (_, __, { user }) => {
      try {
        if (!user) {
          throw new Error('Utilisateur non authentifi√©');
        }

        // Compter les filleuls
        const referredUsers = await User.countDocuments({ 
          idParrain: user.referralCode 
        });

        // Compter les filleuls avec abonnement actif
        const activeReferrals = await User.countDocuments({ 
          referredBy: user.referralCode,
          'subscription.status': 'active'
        });

        // Calculer les gains via les √©v√©nements de parrainage
        const referralEvents = await ReferralEvent.aggregate([
          { $match: { referrerId: user._id } },
          {
            $group: {
              _id: '$paymentStatus',
              totalAmount: { $sum: '$amount' },
              count: { $sum: 1 }
            }
          }
        ]);

        let totalEarnings = 0;
        let pendingEarnings = 0;

        referralEvents.forEach(event => {
          if (event._id === 'COMPLETED') {
            totalEarnings += event.totalAmount;
          } else if (event._id === 'PENDING' || event._id === 'PROCESSING') {
            pendingEarnings += event.totalAmount;
          }
        });

        return {
          totalReferrals: referredUsers,
          activeReferrals: activeReferrals,
          totalEarnings,
          pendingEarnings,
          referralCode: user.referralCode || null
        };

      } catch (error) {
        logger.error('‚ùå Erreur r√©cup√©ration stats parrainage:', error);
        throw new Error('Erreur lors de la r√©cup√©ration des statistiques');
      }
    }
  }
};

export default referralResolvers;
