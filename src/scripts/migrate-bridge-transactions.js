import mongoose from "mongoose";
import Transaction from "../models/Transaction.js";
import User from "../models/User.js";

/**
 * Script de migration pour ajouter workspaceId aux transactions Bridge existantes
 *
 * Ce script :
 * 1. Trouve toutes les transactions sans workspaceId
 * 2. Pour chaque utilisateur, assigne ses transactions √† son premier workspace
 * 3. Met √† jour les transactions avec le workspaceId appropri√©
 */

const migrateTransactions = async () => {
  try {
    console.log("üîÑ D√©but de la migration des transactions Bridge...");

    // Connecter √† MongoDB
    if (!mongoose.connection.readyState) {
      await mongoose.connect(
        process.env.MONGODB_URI || "mongodb://localhost:27017/invoice-app"
      );
      console.log("‚úÖ Connexion MongoDB √©tablie");
    }

    // 1. Trouver toutes les transactions sans workspaceId
    const transactionsWithoutWorkspace = await Transaction.find({
      workspaceId: { $exists: false },
    });

    console.log(
      `üìä Trouv√© ${transactionsWithoutWorkspace.length} transactions sans workspaceId`
    );

    if (transactionsWithoutWorkspace.length === 0) {
      console.log("‚úÖ Aucune transaction √† migrer");
      return;
    }

    // 2. Grouper les transactions par userId
    const transactionsByUser = {};
    for (const transaction of transactionsWithoutWorkspace) {
      const userId = transaction.userId.toString();
      if (!transactionsByUser[userId]) {
        transactionsByUser[userId] = [];
      }
      transactionsByUser[userId].push(transaction);
    }

    console.log(
      `üë• Transactions √† migrer pour ${
        Object.keys(transactionsByUser).length
      } utilisateurs`
    );

    // 3. Pour chaque utilisateur, assigner ses transactions √† son premier workspace
    let migratedCount = 0;
    let errorCount = 0;

    for (const [userId, transactions] of Object.entries(transactionsByUser)) {
      try {
        console.log(`\nüîç Migration pour utilisateur ${userId}...`);

        // R√©cup√©rer l'utilisateur
        const user = await User.findById(userId);
        if (!user) {
          console.log(`‚ùå Utilisateur ${userId} non trouv√©`);
          errorCount += transactions.length;
          continue;
        }

        console.log(
          `üë§ Utilisateur trouv√©: ${user.email || user.name || userId}`
        );

        // Pour cette migration, on va assigner toutes les transactions de cet utilisateur
        // au premier workspace qu'on trouve dans ses organisations Better Auth
        // En pratique, l'admin devra peut-√™tre ajuster manuellement si n√©cessaire

        // R√©cup√©rer les organisations de l'utilisateur via Better Auth
        // Pour simplifier, on va utiliser un workspaceId par d√©faut bas√© sur l'utilisateur
        // L'admin pourra toujours re-synchroniser ou corriger apr√®s

        // Cr√©er un workspaceId bas√© sur l'utilisateur (temporaire)
        // En r√©alit√©, il faudrait r√©cup√©rer le vrai workspaceId depuis Better Auth
        const defaultWorkspaceId = new mongoose.Types.ObjectId();

        console.log(
          `‚ö†Ô∏è  ATTENTION: ${transactions.length} transactions pour ${
            user.email || userId
          }`
        );
        console.log(
          `   Assignment temporaire au workspace: ${defaultWorkspaceId}`
        );
        console.log(
          `   L'admin devra re-synchroniser Bridge ou corriger le workspaceId`
        );

        // Mettre √† jour toutes les transactions de cet utilisateur
        const transactionIds = transactions.map((t) => t._id);
        const result = await Transaction.updateMany(
          { _id: { $in: transactionIds } },
          {
            $set: {
              workspaceId: defaultWorkspaceId,
              migrationNote: `Migration automatique - workspaceId temporaire. Re-synchroniser Bridge recommand√©.`,
            },
          }
        );

        console.log(`‚úÖ ${result.modifiedCount} transactions mises √† jour`);
        migratedCount += result.modifiedCount;
      } catch (error) {
        console.error(`‚ùå Erreur pour utilisateur ${userId}:`, error.message);
        errorCount += transactions.length;
      }
    }

    console.log(`\nüìä R√©sum√© de la migration:`);
    console.log(`   - Transactions migr√©es: ${migratedCount}`);
    console.log(`   - Erreurs: ${errorCount}`);

    console.log(`\nüîß Actions recommand√©es:`);
    console.log(`   1. Red√©marrer le serveur GraphQL`);
    console.log(
      `   2. Demander aux admins de re-synchroniser leurs comptes Bridge`
    );
    console.log(
      `   3. V√©rifier que les transactions apparaissent dans le bon workspace`
    );
  } catch (error) {
    console.error("‚ùå Erreur lors de la migration:", error);
  } finally {
    if (mongoose.connection.readyState) {
      await mongoose.disconnect();
      console.log("üîå Connexion MongoDB ferm√©e");
    }
  }
};

// Fonction pour assigner un workspaceId sp√©cifique √† toutes les transactions d'un utilisateur
const assignWorkspaceToUserTransactions = async (userId, workspaceId) => {
  try {
    console.log(
      `üîÑ Assignment du workspace ${workspaceId} aux transactions de l'utilisateur ${userId}...`
    );

    // Connecter √† MongoDB si pas d√©j√† connect√©
    if (!mongoose.connection.readyState) {
      await mongoose.connect(
        process.env.MONGODB_URI || "mongodb://localhost:27017/newbi"
      );
    }

    const result = await Transaction.updateMany(
      { userId: userId },
      {
        $set: { workspaceId: workspaceId },
        $unset: { migrationNote: 1 },
      }
    );

    console.log(`‚úÖ ${result.modifiedCount} transactions mises √† jour`);
    return result;
  } catch (error) {
    console.error("‚ùå Erreur lors de l'assignment:", error);
    throw error;
  }
};

// Exporter les fonctions
export { migrateTransactions, assignWorkspaceToUserTransactions };

// Ex√©cuter la migration si le script est appel√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
  migrateTransactions();
}
