#!/usr/bin/env node

/**
 * Script pour nettoyer automatiquement les p√©riodes d'essai expir√©es
 * √Ä ex√©cuter via cron job quotidiennement
 */

import mongoose from 'mongoose';
import TrialService from '../services/trialService.js';
import logger from '../utils/logger.js';
import dotenv from 'dotenv';

// Charger les variables d'environnement
dotenv.config();

/**
 * Fonction principale du script
 */
async function main() {
  try {
    logger.info('üöÄ D√©marrage du nettoyage des p√©riodes d\'essai expir√©es');

    // Connexion √† MongoDB
    const mongoUri = process.env.MONGODB_URI || 'mongodb://localhost:27017/newbi';
    await mongoose.connect(mongoUri);
    logger.info('‚úÖ Connexion √† MongoDB √©tablie');

    // Nettoyer les p√©riodes d'essai expir√©es
    const updatedCount = await TrialService.cleanupExpiredTrials();
    logger.info(`‚úÖ ${updatedCount} p√©riodes d'essai expir√©es nettoy√©es`);

    // Obtenir les statistiques apr√®s nettoyage
    const stats = await TrialService.getTrialStats();
    logger.info('üìä Statistiques des p√©riodes d\'essai:', {
      activeTrials: stats.activeTrials,
      expiredTrials: stats.expiredTrials,
      totalTrialsUsed: stats.totalTrialsUsed,
      conversionRate: `${stats.conversionRate}%`,
    });

    // Obtenir les utilisateurs dont la p√©riode d'essai expire dans 3 jours
    const expiringUsers = await TrialService.getUsersWithExpiringTrial(3);
    logger.info(`‚ö†Ô∏è  ${expiringUsers.length} utilisateurs ont une p√©riode d'essai qui expire dans 3 jours`);

    // Obtenir les utilisateurs dont la p√©riode d'essai expire demain
    const expiringTomorrowUsers = await TrialService.getUsersWithExpiringTrial(1);
    logger.info(`üö® ${expiringTomorrowUsers.length} utilisateurs ont une p√©riode d'essai qui expire demain`);

    logger.info('‚úÖ Nettoyage termin√© avec succ√®s');
    
  } catch (error) {
    logger.error('‚ùå Erreur lors du nettoyage des p√©riodes d\'essai:', error);
    process.exit(1);
  } finally {
    // Fermer la connexion MongoDB
    await mongoose.disconnect();
    logger.info('üîå Connexion MongoDB ferm√©e');
    process.exit(0);
  }
}

// Ex√©cuter le script si appel√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}

export default main;
