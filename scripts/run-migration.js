#!/usr/bin/env node

/**
 * Script ma√Ætre de migration de production
 * 
 * Ex√©cute automatiquement tous les scripts de migration dans l'ordre :
 * 1. Diagnostic MongoDB
 * 2. Sauvegarde de production
 * 3. Migration des donn√©es (dry-run puis r√©elle)
 * 4. Validation post-migration
 * 
 * Usage: node scripts/run-migration.js [--dry-run] [--skip-backup] [--auto-confirm]
 */

import { exec, spawn } from 'child_process';
import { promisify } from 'util';
import readline from 'readline';
import path from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

const execAsync = promisify(exec);
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Configuration
const SCRIPTS_DIR = __dirname;
const BACKUP_DIR = './backups';

// Param√®tres de ligne de commande
const isDryRun = process.argv.includes('--dry-run');
const skipBackup = process.argv.includes('--skip-backup');
const autoConfirm = process.argv.includes('--auto-confirm');

// Interface readline pour les confirmations
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

/**
 * Demande confirmation √† l'utilisateur
 */
async function askConfirmation(question) {
  if (autoConfirm) {
    console.log(`${question} (auto-confirm√©)`);
    return true;
  }
  
  return new Promise((resolve) => {
    rl.question(`${question} (y/N): `, (answer) => {
      resolve(answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes');
    });
  });
}

/**
 * Ex√©cute un script et affiche la sortie en temps r√©el
 */
async function runScript(scriptName, args = [], description = '') {
  console.log(`\nüîÑ ${description || `Ex√©cution de ${scriptName}`}`);
  console.log('=' .repeat(60));
  
  const scriptPath = path.join(SCRIPTS_DIR, scriptName);
  
  return new Promise((resolve, reject) => {
    const child = spawn('node', [scriptPath, ...args], {
      stdio: 'inherit',
      cwd: path.dirname(SCRIPTS_DIR)
    });
    
    child.on('close', (code) => {
      if (code === 0) {
        console.log(`‚úÖ ${description || scriptName} termin√© avec succ√®s`);
        resolve();
      } else {
        console.error(`‚ùå ${description || scriptName} a √©chou√© avec le code ${code}`);
        reject(new Error(`Script ${scriptName} failed with code ${code}`));
      }
    });
    
    child.on('error', (error) => {
      console.error(`‚ùå Erreur lors de l'ex√©cution de ${scriptName}:`, error.message);
      reject(error);
    });
  });
}

/**
 * Affiche un r√©sum√© des √©tapes √† ex√©cuter
 */
function displayMigrationPlan() {
  console.log('\nüöÄ PLAN DE MIGRATION DE PRODUCTION');
  console.log('==================================');
  console.log(`Mode: ${isDryRun ? 'DRY-RUN (simulation)' : 'PRODUCTION (r√©el)'}`);
  console.log(`Sauvegarde: ${skipBackup ? 'IGNOR√âE' : 'INCLUSE'}`);
  console.log(`Confirmations: ${autoConfirm ? 'AUTOMATIQUES' : 'MANUELLES'}`);
  
  console.log('\n√âtapes pr√©vues:');
  console.log('1. üîç Diagnostic MongoDB');
  if (!skipBackup) {
    console.log('2. üíæ Sauvegarde de production');
  }
  console.log(`${skipBackup ? '2' : '3'}. üîÑ Migration des donn√©es ${isDryRun ? '(dry-run)' : ''}`);
  console.log(`${skipBackup ? '3' : '4'}. ‚úÖ Validation post-migration`);
  
  if (!isDryRun) {
    console.log('\n‚ö†Ô∏è  ATTENTION: Cette migration va modifier la base de production !');
  }
}

/**
 * Fonction principale
 */
async function main() {
  try {
    displayMigrationPlan();
    
    // Confirmation initiale
    if (!isDryRun) {
      const confirmed = await askConfirmation('\n‚ö†Ô∏è  √ätes-vous s√ªr de vouloir proc√©der √† la migration de production ?');
      if (!confirmed) {
        console.log('‚ùå Migration annul√©e par l\'utilisateur');
        process.exit(0);
      }
    }
    
    console.log('\nüöÄ D√âMARRAGE DE LA MIGRATION');
    console.log('============================');
    
    // √âtape 1: Diagnostic MongoDB
    await runScript('diagnose-mongodb.js', [], '√âTAPE 1: Diagnostic MongoDB');
    
    // √âtape 2: Sauvegarde (optionnelle)
    if (!skipBackup) {
      const backupConfirmed = await askConfirmation('\nüíæ Proc√©der √† la sauvegarde de production ?');
      if (backupConfirmed) {
        await runScript('backup-production-db.js', [`--output-dir=${BACKUP_DIR}`], '√âTAPE 2: Sauvegarde de production');
      } else {
        console.log('‚ö†Ô∏è  Sauvegarde ignor√©e par l\'utilisateur');
      }
    }
    
    // √âtape 3: Migration des donn√©es
    const migrationArgs = isDryRun ? ['--dry-run'] : [];
    const migrationDescription = `√âTAPE ${skipBackup ? '2' : '3'}: Migration des donn√©es ${isDryRun ? '(simulation)' : ''}`;
    
    if (!isDryRun) {
      const migrationConfirmed = await askConfirmation('\nüîÑ Proc√©der √† la migration r√©elle des donn√©es ?');
      if (!migrationConfirmed) {
        console.log('‚ùå Migration annul√©e par l\'utilisateur');
        process.exit(0);
      }
    }
    
    await runScript('migrate-production-to-new-structure.js', migrationArgs, migrationDescription);
    
    // √âtape 4: Validation post-migration
    if (!isDryRun) {
      const validationConfirmed = await askConfirmation('\n‚úÖ Proc√©der √† la validation post-migration ?');
      if (validationConfirmed) {
        const validationDescription = `√âTAPE ${skipBackup ? '3' : '4'}: Validation post-migration`;
        await runScript('validate-migration-integrity.js', [], validationDescription);
      }
    }
    
    // R√©sum√© final
    console.log('\nüéâ MIGRATION TERMIN√âE AVEC SUCC√àS');
    console.log('=================================');
    
    if (isDryRun) {
      console.log('‚úÖ Simulation termin√©e - aucune donn√©e n\'a √©t√© modifi√©e');
      console.log('üí° Pour ex√©cuter la migration r√©elle, relancez sans --dry-run');
    } else {
      console.log('‚úÖ Migration de production termin√©e');
      console.log('üíæ Sauvegarde disponible dans:', BACKUP_DIR);
      console.log('üìã Consultez les logs pour plus de d√©tails');
    }
    
  } catch (error) {
    console.error('\n‚ùå ERREUR FATALE LORS DE LA MIGRATION');
    console.error('=====================================');
    console.error('Erreur:', error.message);
    
    if (!isDryRun) {
      console.error('\nüîÑ En cas de probl√®me, utilisez le script de rollback:');
      console.error('node scripts/rollback-migration.js');
    }
    
    process.exit(1);
  } finally {
    rl.close();
  }
}

// Gestion des signaux d'interruption
process.on('SIGINT', () => {
  console.log('\n‚ö†Ô∏è  Migration interrompue par l\'utilisateur');
  rl.close();
  process.exit(1);
});

process.on('SIGTERM', () => {
  console.log('\n‚ö†Ô∏è  Migration interrompue');
  rl.close();
  process.exit(1);
});

// Ex√©cution
main();
