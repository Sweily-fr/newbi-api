import { spawn } from 'child_process';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import readline from 'readline';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Configuration
const DEMO_EMAIL = "demo@newbi.fr";

console.log('üéØ SCRIPT D\'AJOUT DE DONN√âES DE D√âMONSTRATION NEWBI');
console.log('==================================================');
console.log('üìß Utilisateur cible:', DEMO_EMAIL);
console.log('üìä Collections: 13 factures, 10 devis, 5 avoirs');
console.log('');

// Interface readline pour les confirmations
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function askQuestion(question) {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer.trim().toLowerCase());
    });
  });
}

async function confirmExecution() {
  console.log('‚ö†Ô∏è  ATTENTION: Ce script va:');
  console.log('   ‚Ä¢ Supprimer toutes les factures existantes de l\'utilisateur d√©mo');
  console.log('   ‚Ä¢ Supprimer tous les devis existants de l\'utilisateur d√©mo');
  console.log('   ‚Ä¢ Supprimer tous les avoirs existants de l\'utilisateur d√©mo');
  console.log('   ‚Ä¢ Cr√©er de nouvelles donn√©es de d√©monstration');
  console.log('');
  
  const answer = await askQuestion('√ätes-vous s√ªr de vouloir continuer ? (oui/non): ');
  return answer === 'oui' || answer === 'o' || answer === 'yes' || answer === 'y';
}

async function showPreview() {
  console.log('üìã APER√áU DES DONN√âES QUI SERONT CR√â√âES:');
  console.log('');
  console.log('üìÑ FACTURES (13):');
  console.log('   ‚Ä¢ Services vari√©s: D√©veloppement, Formation, Consultation, etc.');
  console.log('   ‚Ä¢ Statuts r√©partis: 50% COMPLETED, 30% PENDING, 15% DRAFT, 5% CANCELED');
  console.log('   ‚Ä¢ Montants: Entre 100‚Ç¨ et 15,000‚Ç¨ selon les services');
  console.log('   ‚Ä¢ Dates: R√©parties sur les 90 derniers jours');
  console.log('');
  console.log('üìã DEVIS (10):');
  console.log('   ‚Ä¢ Projets vari√©s: E-commerce, Mobile, CRM, IoT, etc.');
  console.log('   ‚Ä¢ Statuts r√©partis: 30% COMPLETED, 50% PENDING, 15% CANCELED, 5% DRAFT');
  console.log('   ‚Ä¢ Montants: Entre 1,500‚Ç¨ et 11,400‚Ç¨ selon les projets');
  console.log('   ‚Ä¢ Validit√©: 30 jours √† partir de la date d\'√©mission');
  console.log('');
  console.log('üí∞ AVOIRS (5):');
  console.log('   ‚Ä¢ Types vari√©s: Geste commercial, Correction, Remboursement, etc.');
  console.log('   ‚Ä¢ Montants: Entre 50‚Ç¨ et 500‚Ç¨ (montants n√©gatifs)');
  console.log('   ‚Ä¢ Li√©s aux factures existantes de mani√®re al√©atoire');
  console.log('   ‚Ä¢ M√©thodes de remboursement vari√©es');
  console.log('');
}

function executeScript() {
  return new Promise((resolve, reject) => {
    console.log('üöÄ Ex√©cution du script principal...\n');
    
    const scriptPath = join(__dirname, 'add-demo-documents.js');
    const child = spawn('node', [scriptPath], {
      stdio: 'inherit',
      cwd: __dirname
    });
    
    child.on('close', (code) => {
      if (code === 0) {
        resolve();
      } else {
        reject(new Error(`Le script s'est termin√© avec le code ${code}`));
      }
    });
    
    child.on('error', (error) => {
      reject(error);
    });
  });
}

async function main() {
  try {
    // V√©rifier les arguments de ligne de commande
    const args = process.argv.slice(2);
    const forceMode = args.includes('--force') || args.includes('-f');
    const previewMode = args.includes('--preview') || args.includes('-p');
    
    if (previewMode) {
      await showPreview();
      rl.close();
      return;
    }
    
    // Afficher l'aper√ßu
    await showPreview();
    
    // Demander confirmation si pas en mode force
    if (!forceMode) {
      const confirmed = await confirmExecution();
      if (!confirmed) {
        console.log('‚ùå Op√©ration annul√©e par l\'utilisateur');
        rl.close();
        return;
      }
    } else {
      console.log('üî• Mode force activ√© - Ex√©cution sans confirmation');
    }
    
    rl.close();
    
    // Ex√©cuter le script principal
    await executeScript();
    
    console.log('\nüéâ SUCC√àS !');
    console.log('‚úÖ Les donn√©es de d√©monstration ont √©t√© ajout√©es avec succ√®s');
    console.log('üîó Connectez-vous avec demo@newbi.fr pour voir les r√©sultats');
    console.log('');
    console.log('üìä Prochaines √©tapes:');
    console.log('   ‚Ä¢ Tester la cr√©ation de nouvelles factures');
    console.log('   ‚Ä¢ V√©rifier la num√©rotation s√©quentielle');
    console.log('   ‚Ä¢ Tester la conversion devis ‚Üí facture');
    console.log('   ‚Ä¢ Tester la cr√©ation d\'avoirs');
    
  } catch (error) {
    console.error('\n‚ùå ERREUR:', error.message);
    
    if (error.message.includes('ECONNREFUSED')) {
      console.error('üí° Solution: V√©rifiez que MongoDB est d√©marr√©');
    } else if (error.message.includes('authentication failed')) {
      console.error('üí° Solution: V√©rifiez les identifiants MongoDB');
    } else if (error.message.includes('demo@newbi.fr')) {
      console.error('üí° Solution: Cr√©ez d\'abord l\'utilisateur d√©mo avec create-demo-account.js');
    }
    
    console.error('\nüîß D√©pannage:');
    console.error('   ‚Ä¢ V√©rifiez que MongoDB est accessible');
    console.error('   ‚Ä¢ V√©rifiez que l\'utilisateur demo@newbi.fr existe');
    console.error('   ‚Ä¢ Consultez les logs d√©taill√©s ci-dessus');
    
    process.exit(1);
  } finally {
    if (rl && !rl.closed) {
      rl.close();
    }
  }
}

// Gestion des signaux
process.on('SIGINT', () => {
  console.log('\n‚ö†Ô∏è  Interruption d√©tect√©e');
  if (rl && !rl.closed) {
    rl.close();
  }
  process.exit(0);
});

// Affichage de l'aide
if (process.argv.includes('--help') || process.argv.includes('-h')) {
  console.log('UTILISATION:');
  console.log('  node run-add-demo-documents.js [options]');
  console.log('');
  console.log('OPTIONS:');
  console.log('  --force, -f     Ex√©cuter sans demander de confirmation');
  console.log('  --preview, -p   Afficher seulement l\'aper√ßu des donn√©es');
  console.log('  --help, -h      Afficher cette aide');
  console.log('');
  console.log('EXEMPLES:');
  console.log('  node run-add-demo-documents.js');
  console.log('  node run-add-demo-documents.js --force');
  console.log('  node run-add-demo-documents.js --preview');
  process.exit(0);
}

// Ex√©cution
main().catch(console.error);
