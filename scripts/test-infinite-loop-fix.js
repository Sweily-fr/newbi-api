#!/usr/bin/env node

/**
 * Script pour tester que le hook useDashboardLayout ne cause plus de boucles infinies
 */

const fs = require('fs');
const path = require('path');

const PROJECT_ROOT = path.resolve(__dirname, '..');
const HOOK_PATH = path.join(PROJECT_ROOT, 'NewbiV2/src/hooks/useDashboardLayout.js');

function analyzeHookForInfiniteLoops() {
  console.log('üîç Analyse du hook pour d√©tecter les risques de boucles infinies...\n');
  
  if (!fs.existsSync(HOOK_PATH)) {
    console.error('‚ùå Hook introuvable:', HOOK_PATH);
    return false;
  }
  
  try {
    const content = fs.readFileSync(HOOK_PATH, 'utf8');
    
    const tests = [
      {
        name: 'Protection contre appels multiples (useRef)',
        test: () => content.includes('isLoadingRef') && content.includes('useRef'),
        description: 'V√©rifie la pr√©sence d\'un m√©canisme de protection contre les appels simultan√©s'
      },
      {
        name: 'D√©pendances useCallback simplifi√©es',
        test: () => {
          const callbackMatches = content.match(/useCallback\([^,]+,\s*\[[^\]]*\]/g) || [];
          // V√©rifier qu'aucun useCallback n'inclut cachedData dans ses d√©pendances
          return !callbackMatches.some(match => match.includes('cachedData'));
        },
        description: 'V√©rifie que les useCallback n\'incluent pas cachedData dans leurs d√©pendances'
      },
      {
        name: 'useEffect avec timeout pour √©viter appels fr√©quents',
        test: () => content.includes('setTimeout') && content.includes('clearTimeout'),
        description: 'V√©rifie la pr√©sence de timeouts pour √©viter les appels trop fr√©quents'
      },
      {
        name: 'Force refresh parameter',
        test: () => content.includes('forceRefresh') && content.includes('forceRefresh = false'),
        description: 'V√©rifie la pr√©sence du param√®tre forceRefresh pour contr√¥ler les rechargements'
      },
      {
        name: 'Pas d\'acc√®s direct √† cachedData dans loadLayoutData',
        test: () => {
          // Extraire la fonction loadLayoutData
          const loadLayoutDataMatch = content.match(/const loadLayoutData = useCallback\(([^}]+}){2,}/s);
          if (!loadLayoutDataMatch) return false;
          
          const loadLayoutDataContent = loadLayoutDataMatch[0];
          // V√©rifier qu'elle n'acc√®de pas directement √† cachedData (sauf pour les logs)
          return !loadLayoutDataContent.includes('cachedData.lastUpdate') || 
                 loadLayoutDataContent.includes('// √âviter');
        },
        description: 'V√©rifie que loadLayoutData n\'acc√®de pas directement √† cachedData'
      },
      {
        name: 'Gestion d\'erreur dans localStorage',
        test: () => content.includes('try') && content.includes('localStorage') && content.includes('catch'),
        description: 'V√©rifie la gestion d\'erreur pour les op√©rations localStorage'
      }
    ];
    
    let passed = 0;
    let failed = 0;
    
    for (const test of tests) {
      try {
        if (test.test()) {
          console.log(`‚úÖ ${test.name}`);
          console.log(`   ${test.description}\n`);
          passed++;
        } else {
          console.log(`‚ùå ${test.name}`);
          console.log(`   ${test.description}\n`);
          failed++;
        }
      } catch (error) {
        console.log(`‚ùå ${test.name} - Erreur: ${error.message}\n`);
        failed++;
      }
    }
    
    console.log(`üìä R√©sultat: ${passed} r√©ussis, ${failed} √©chou√©s`);
    
    if (failed === 0) {
      console.log('\nüéâ Le hook semble prot√©g√© contre les boucles infinies !');
      return true;
    } else {
      console.log('\n‚ö†Ô∏è  Le hook pr√©sente encore des risques de boucles infinies.');
      return false;
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lecture du hook:', error.message);
    return false;
  }
}

function checkDependencyArrays() {
  console.log('\nüîç Analyse des tableaux de d√©pendances...\n');
  
  try {
    const content = fs.readFileSync(HOOK_PATH, 'utf8');
    
    // Extraire tous les useEffect et useCallback
    const hookMatches = content.match(/(useEffect|useCallback)\([^,]+,\s*\[[^\]]*\]/g) || [];
    
    console.log('üìã Hooks avec d√©pendances trouv√©s:');
    hookMatches.forEach((match, index) => {
      console.log(`   ${index + 1}. ${match.substring(0, 80)}...`);
    });
    
    // V√©rifier les patterns probl√©matiques
    const problematicPatterns = [
      { pattern: /cachedData(?!\.user|\.organization)/, description: 'R√©f√©rence directe √† cachedData' },
      { pattern: /loadLayoutData.*cachedData/, description: 'loadLayoutData d√©pend de cachedData' },
      { pattern: /setState.*useEffect/, description: 'setState dans useEffect sans protection' }
    ];
    
    console.log('\n‚ö†Ô∏è  Patterns probl√©matiques d√©tect√©s:');
    let hasProblems = false;
    
    for (const { pattern, description } of problematicPatterns) {
      if (pattern.test(content)) {
        console.log(`   ‚ùå ${description}`);
        hasProblems = true;
      }
    }
    
    if (!hasProblems) {
      console.log('   ‚úÖ Aucun pattern probl√©matique d√©tect√©');
    }
    
    return !hasProblems;
    
  } catch (error) {
    console.error('‚ùå Erreur analyse d√©pendances:', error.message);
    return false;
  }
}

function suggestBestPractices() {
  console.log('\nüí° Bonnes pratiques pour √©viter les boucles infinies:\n');
  
  const practices = [
    '1. Utiliser useRef pour les flags de protection',
    '2. √âviter cachedData dans les d√©pendances des hooks',
    '3. Utiliser setTimeout pour d√©bouncer les appels',
    '4. Impl√©menter forceRefresh pour contr√¥ler les rechargements',
    '5. S√©parer la logique de cache de la logique de chargement',
    '6. Utiliser des fonctions de callback stables',
    '7. Tester avec React DevTools Profiler'
  ];
  
  practices.forEach(practice => console.log(practice));
}

function main() {
  console.log('üß™ Test de protection contre les boucles infinies\n');
  
  const hookAnalysis = analyzeHookForInfiniteLoops();
  const dependencyAnalysis = checkDependencyArrays();
  
  if (hookAnalysis && dependencyAnalysis) {
    console.log('\n‚úÖ Le hook semble s√ªr contre les boucles infinies !');
    console.log('\nüìù Prochaines √©tapes:');
    console.log('1. Tester dans l\'application r√©elle');
    console.log('2. Surveiller les performances avec React DevTools');
    console.log('3. V√©rifier l\'absence d\'erreurs console');
    console.log('4. Valider le comportement du cache');
  } else {
    console.log('\n‚ùå Le hook n√©cessite encore des am√©liorations.');
    suggestBestPractices();
  }
}

if (require.main === module) {
  main();
}

module.exports = { analyzeHookForInfiniteLoops, checkDependencyArrays };
