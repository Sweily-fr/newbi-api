import mongoose from 'mongoose';
import dotenv from 'dotenv';

// Charger les variables d'environnement
dotenv.config();

const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/invoice-app';

async function fixSpecificDraftConflict() {
  try {
    // Connexion √† MongoDB
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ Connect√© √† MongoDB');

    const db = mongoose.connection.db;
    const collection = db.collection('invoices');

    // Rechercher le conflit sp√©cifique
    const conflictQuery = {
      number: "DRAFT-000002",
      workspaceId: new mongoose.Types.ObjectId('68c6872c8d7d37aa7f55db33'),
      issueYear: 2025
    };

    console.log('üîç Recherche du conflit sp√©cifique...');
    console.log('Crit√®res:', JSON.stringify(conflictQuery, null, 2));

    const conflictingDrafts = await collection.find(conflictQuery).toArray();
    
    console.log(`üìã Trouv√© ${conflictingDrafts.length} document(s) en conflit:`);
    
    if (conflictingDrafts.length === 0) {
      console.log('‚ÑπÔ∏è  Aucun document trouv√© avec ces crit√®res');
      
      // Rechercher des documents similaires
      console.log('\nüîç Recherche de documents similaires...');
      
      const similarDrafts = await collection.find({
        number: { $regex: /^DRAFT-000002/ },
        workspaceId: new mongoose.Types.ObjectId('68c6872c8d7d37aa7f55db33')
      }).toArray();
      
      console.log(`üìã Trouv√© ${similarDrafts.length} document(s) similaire(s):`);
      similarDrafts.forEach((doc, index) => {
        console.log(`  ${index + 1}. ID: ${doc._id}`);
        console.log(`     Num√©ro: ${doc.number}`);
        console.log(`     Statut: ${doc.status}`);
        console.log(`     Ann√©e: ${doc.issueYear}`);
        console.log(`     Cr√©√© le: ${doc.createdAt}`);
        console.log('');
      });
      
      return;
    }

    // Afficher les d√©tails des documents en conflit
    conflictingDrafts.forEach((doc, index) => {
      console.log(`\nüìÑ Document ${index + 1}:`);
      console.log(`  ID: ${doc._id}`);
      console.log(`  Num√©ro: ${doc.number}`);
      console.log(`  Statut: ${doc.status}`);
      console.log(`  Ann√©e: ${doc.issueYear}`);
      console.log(`  Cr√©√© le: ${doc.createdAt}`);
      console.log(`  Modifi√© le: ${doc.updatedAt}`);
    });

    if (conflictingDrafts.length === 1) {
      const doc = conflictingDrafts[0];
      
      // Renommer le document existant
      const timestamp = Date.now();
      const newNumber = `DRAFT-000002-${timestamp}`;
      
      console.log(`\nüîÑ Renommage du document existant:`);
      console.log(`  Ancien num√©ro: ${doc.number}`);
      console.log(`  Nouveau num√©ro: ${newNumber}`);
      
      const result = await collection.updateOne(
        { _id: doc._id },
        { 
          $set: { 
            number: newNumber,
            updatedAt: new Date()
          } 
        }
      );
      
      if (result.modifiedCount === 1) {
        console.log('‚úÖ Document renomm√© avec succ√®s');
        console.log('‚úÖ Vous pouvez maintenant cr√©er un nouveau brouillon DRAFT-000002');
      } else {
        console.log('‚ùå √âchec du renommage');
      }
      
    } else if (conflictingDrafts.length > 1) {
      console.log(`\nüîÑ Renommage de ${conflictingDrafts.length} documents en conflit:`);
      
      // Trier par date de cr√©ation (garder le plus r√©cent)
      conflictingDrafts.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
      
      // Renommer tous sauf le plus r√©cent
      const [keepDoc, ...renameeDocs] = conflictingDrafts;
      
      console.log(`‚úÖ Garder le plus r√©cent: ${keepDoc._id} (cr√©√© le ${keepDoc.createdAt})`);
      
      for (let i = 0; i < renameeDocs.length; i++) {
        const doc = renameeDocs[i];
        const timestamp = Date.now() + i + 1; // √âviter les doublons
        const newNumber = `DRAFT-000002-${timestamp}`;
        
        console.log(`üîÑ Renommage: ${doc._id} -> ${newNumber}`);
        
        await collection.updateOne(
          { _id: doc._id },
          { 
            $set: { 
              number: newNumber,
              updatedAt: new Date()
            } 
          }
        );
      }
      
      console.log(`‚úÖ ${renameeDocs.length} document(s) renomm√©(s) avec succ√®s`);
      console.log('‚úÖ Vous pouvez maintenant cr√©er un nouveau brouillon DRAFT-000002');
    }

    console.log('\nüéâ CORRECTION TERMIN√âE AVEC SUCC√àS!');

  } catch (error) {
    console.error('‚ùå Erreur lors de la correction:', error);
    throw error;
  } finally {
    await mongoose.disconnect();
    console.log('üîå D√©connect√© de MongoDB');
  }
}

// Ex√©cuter le script
fixSpecificDraftConflict().catch(console.error);
