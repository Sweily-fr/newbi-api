#!/usr/bin/env node

import { exec } from 'child_process';
import { promisify } from 'util';

const execAsync = promisify(exec);

console.log('üîç Diagnostic Serveur Production');
console.log('=================================');

async function checkPM2Status() {
  console.log('1Ô∏è‚É£ V√©rification statut PM2...');
  try {
    const { stdout } = await execAsync('pm2 status');
    console.log(stdout);
  } catch (error) {
    console.error('‚ùå Erreur PM2 status:', error.message);
  }
  console.log('');
}

async function checkPM2Logs() {
  console.log('2Ô∏è‚É£ Logs PM2 r√©cents...');
  try {
    const { stdout } = await execAsync('pm2 logs newbi --lines 20 --nostream');
    console.log(stdout);
  } catch (error) {
    console.error('‚ùå Erreur PM2 logs:', error.message);
  }
  console.log('');
}

async function checkPortUsage() {
  console.log('3Ô∏è‚É£ V√©rification ports utilis√©s...');
  try {
    const { stdout } = await execAsync('netstat -tlnp | grep :4000');
    if (stdout.trim()) {
      console.log('Port 4000 utilis√©:');
      console.log(stdout);
    } else {
      console.log('‚ùå Port 4000 non utilis√© - application probablement arr√™t√©e');
    }
  } catch (error) {
    console.log('‚ùå Port 4000 non trouv√© - application arr√™t√©e');
  }
  console.log('');
}

async function checkProcesses() {
  console.log('4Ô∏è‚É£ Processus Node.js actifs...');
  try {
    const { stdout } = await execAsync('ps aux | grep node | grep -v grep');
    if (stdout.trim()) {
      console.log(stdout);
    } else {
      console.log('‚ùå Aucun processus Node.js trouv√©');
    }
  } catch (error) {
    console.log('‚ùå Erreur v√©rification processus:', error.message);
  }
  console.log('');
}

async function checkDiskSpace() {
  console.log('5Ô∏è‚É£ Espace disque disponible...');
  try {
    const { stdout } = await execAsync('df -h');
    console.log(stdout);
  } catch (error) {
    console.error('‚ùå Erreur v√©rification disque:', error.message);
  }
  console.log('');
}

async function checkMemory() {
  console.log('6Ô∏è‚É£ Utilisation m√©moire...');
  try {
    const { stdout } = await execAsync('free -h');
    console.log(stdout);
  } catch (error) {
    console.error('‚ùå Erreur v√©rification m√©moire:', error.message);
  }
  console.log('');
}

async function testMongoConnection() {
  console.log('7Ô∏è‚É£ Test connexion MongoDB...');
  try {
    const { stdout } = await execAsync('mongo --eval "db.adminCommand(\'ping\')" --quiet');
    if (stdout.includes('ok')) {
      console.log('‚úÖ MongoDB accessible');
    } else {
      console.log('‚ùå MongoDB inaccessible');
    }
  } catch (error) {
    console.log('‚ùå MongoDB inaccessible:', error.message);
  }
  console.log('');
}

async function suggestActions() {
  console.log('üõ†Ô∏è  Actions sugg√©r√©es:');
  console.log('=====================');
  
  // V√©rifier si l'app est en cours d'ex√©cution
  try {
    const { stdout } = await execAsync('pm2 status | grep newbi');
    if (stdout.includes('stopped') || stdout.includes('errored')) {
      console.log('1. Red√©marrer l\'application: pm2 restart newbi');
      console.log('2. Ou d√©marrer: pm2 start ecosystem.config.cjs');
    } else if (stdout.includes('online')) {
      console.log('1. Application en ligne mais port inaccessible');
      console.log('2. V√©rifier configuration Caddy');
      console.log('3. V√©rifier port d\'√©coute dans ecosystem.config.cjs');
    }
  } catch (error) {
    console.log('1. PM2 non configur√© - d√©marrer manuellement');
    console.log('2. cd ~/api.newbi.fr && npm start');
  }
  
  console.log('3. V√©rifier logs d√©taill√©s: pm2 logs newbi --follow');
  console.log('4. Test manuel: node src/server.js');
  console.log('5. V√©rifier variables d\'environnement: node scripts/check-env-vars.js');
}

async function runDiagnostic() {
  await checkPM2Status();
  await checkPM2Logs();
  await checkPortUsage();
  await checkProcesses();
  await checkDiskSpace();
  await checkMemory();
  await testMongoConnection();
  await suggestActions();
}

runDiagnostic().catch(console.error);
