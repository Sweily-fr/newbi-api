#!/usr/bin/env node

import fetch from 'node-fetch';

console.log('üåê Test CORS API Production');
console.log('============================');

const API_URL = 'https://api.newbi.fr';
const FRONTEND_ORIGIN = 'https://newbi-v2.vercel.app';

async function testCORS() {
  console.log(`üîó API URL: ${API_URL}`);
  console.log(`üåç Origin: ${FRONTEND_ORIGIN}`);
  console.log('');

  try {
    // Test 1: Requ√™te OPTIONS (preflight)
    console.log('1Ô∏è‚É£ Test requ√™te OPTIONS (preflight)...');
    
    const optionsResponse = await fetch(API_URL, {
      method: 'OPTIONS',
      headers: {
        'Origin': FRONTEND_ORIGIN,
        'Access-Control-Request-Method': 'POST',
        'Access-Control-Request-Headers': 'Content-Type, Authorization'
      }
    });

    console.log('   Status:', optionsResponse.status);
    console.log('   Headers CORS:');
    console.log('   - Access-Control-Allow-Origin:', optionsResponse.headers.get('Access-Control-Allow-Origin'));
    console.log('   - Access-Control-Allow-Methods:', optionsResponse.headers.get('Access-Control-Allow-Methods'));
    console.log('   - Access-Control-Allow-Headers:', optionsResponse.headers.get('Access-Control-Allow-Headers'));
    console.log('   - Access-Control-Allow-Credentials:', optionsResponse.headers.get('Access-Control-Allow-Credentials'));
    
    if (optionsResponse.status === 200) {
      console.log('   ‚úÖ Requ√™te OPTIONS r√©ussie');
    } else {
      console.log('   ‚ùå Requ√™te OPTIONS √©chou√©e');
    }
    
    console.log('');

    // Test 2: Requ√™te POST GraphQL
    console.log('2Ô∏è‚É£ Test requ√™te POST GraphQL...');
    
    const graphqlQuery = {
      query: `
        query {
          __typename
        }
      `
    };

    const postResponse = await fetch(`${API_URL}/graphql`, {
      method: 'POST',
      headers: {
        'Origin': FRONTEND_ORIGIN,
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      body: JSON.stringify(graphqlQuery)
    });

    console.log('   Status:', postResponse.status);
    console.log('   Headers CORS:');
    console.log('   - Access-Control-Allow-Origin:', postResponse.headers.get('Access-Control-Allow-Origin'));
    
    if (postResponse.status === 200) {
      console.log('   ‚úÖ Requ√™te GraphQL r√©ussie');
      const data = await postResponse.json();
      console.log('   R√©ponse:', data);
    } else {
      console.log('   ‚ùå Requ√™te GraphQL √©chou√©e');
      const errorText = await postResponse.text();
      console.log('   Erreur:', errorText.substring(0, 200) + '...');
    }

    console.log('');

    // Test 3: V√©rification des endpoints
    console.log('3Ô∏è‚É£ Test des endpoints disponibles...');
    
    const endpoints = [
      '/',
      '/graphql',
      '/health',
      '/api/status'
    ];

    for (const endpoint of endpoints) {
      try {
        const response = await fetch(`${API_URL}${endpoint}`, {
          method: 'GET',
          headers: {
            'Origin': FRONTEND_ORIGIN
          }
        });
        
        console.log(`   ${endpoint}: ${response.status} ${response.statusText}`);
      } catch (error) {
        console.log(`   ${endpoint}: ‚ùå ${error.message}`);
      }
    }

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.message);
  }
}

// Test de connectivit√© r√©seau
async function testNetworkConnectivity() {
  console.log('üîç Test de connectivit√© r√©seau...');
  
  try {
    const response = await fetch(API_URL, {
      method: 'HEAD',
      timeout: 5000
    });
    
    console.log('‚úÖ Serveur accessible');
    console.log('   Status:', response.status);
    console.log('   Server:', response.headers.get('Server') || 'Non sp√©cifi√©');
    
  } catch (error) {
    console.error('‚ùå Serveur inaccessible:', error.message);
  }
  
  console.log('');
}

async function runTests() {
  await testNetworkConnectivity();
  await testCORS();
  
  console.log('üéØ Recommandations:');
  console.log('===================');
  console.log('1. V√©rifiez que les headers Access-Control-Allow-Origin sont pr√©sents');
  console.log('2. Assurez-vous que les requ√™tes OPTIONS retournent 200');
  console.log('3. V√©rifiez que l\'origine Vercel est dans allowedOrigins');
  console.log('4. Red√©marrez le serveur apr√®s modification: pm2 restart newbi');
}

runTests().catch(console.error);
