#!/usr/bin/env node

import { exec } from 'child_process';
import { promisify } from 'util';

const execAsync = promisify(exec);

console.log('üîÑ Red√©marrage Propre PM2');
console.log('=========================');

async function cleanRestartPM2() {
  try {
    console.log('1Ô∏è‚É£ Arr√™t de tous les processus newbi...');
    await execAsync('pm2 delete newbi').catch(() => {
      console.log('   Aucun processus newbi √† supprimer');
    });

    console.log('2Ô∏è‚É£ Nettoyage du cache PM2...');
    await execAsync('pm2 kill').catch(() => {
      console.log('   PM2 daemon d√©j√† arr√™t√©');
    });

    console.log('3Ô∏è‚É£ V√©rification que le port 4000 est libre...');
    try {
      const { stdout } = await execAsync('lsof -ti:4000');
      if (stdout.trim()) {
        console.log('   Port 4000 utilis√©, lib√©ration...');
        await execAsync(`kill -9 ${stdout.trim()}`);
      }
    } catch (error) {
      console.log('   Port 4000 libre');
    }

    console.log('4Ô∏è‚É£ D√©marrage avec ecosystem.config.cjs...');
    const { stdout } = await execAsync('pm2 start ecosystem.config.cjs');
    console.log(stdout);

    console.log('5Ô∏è‚É£ Sauvegarde de la configuration...');
    await execAsync('pm2 save');

    console.log('6Ô∏è‚É£ V√©rification du statut...');
    const { stdout: status } = await execAsync('pm2 status');
    console.log(status);

    console.log('7Ô∏è‚É£ Test du port 4000...');
    try {
      const { stdout: portCheck } = await execAsync('netstat -tlnp | grep :4000');
      if (portCheck.trim()) {
        console.log('‚úÖ Application √©coute sur le port 4000');
        console.log(portCheck);
      } else {
        console.log('‚ùå Port 4000 non utilis√©');
      }
    } catch (error) {
      console.log('‚ùå Port 4000 non trouv√©');
    }

    console.log('8Ô∏è‚É£ Logs r√©cents...');
    const { stdout: logs } = await execAsync('pm2 logs newbi --lines 5 --nostream');
    console.log(logs);

    console.log('\n‚úÖ Red√©marrage termin√©!');
    console.log('üîó Testez l\'API: curl https://api.newbi.fr');
    console.log('üìä Surveillez les logs: pm2 logs newbi --follow');

  } catch (error) {
    console.error('‚ùå Erreur lors du red√©marrage:', error.message);
    console.log('\nüõ†Ô∏è  Actions manuelles:');
    console.log('1. pm2 delete newbi');
    console.log('2. pm2 kill');
    console.log('3. pm2 start ecosystem.config.cjs');
    console.log('4. pm2 save');
  }
}

cleanRestartPM2();
