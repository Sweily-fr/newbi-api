#!/usr/bin/env node

/**
 * Script de test pour v√©rifier que la r√©solution des conflits de brouillons
 * ne g√©n√®re plus de double pr√©fixe DRAFT-DRAFT-
 */

import mongoose from 'mongoose';
import Quote from '../src/models/Quote.js';
import Invoice from '../src/models/Invoice.js';
import { generateQuoteNumber, generateInvoiceNumber } from '../src/utils/documentNumbers.js';

// Configuration MongoDB
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://newbiAdmin:newbiPassword2024@localhost:27017/newbi?authSource=admin';

async function connectDB() {
  try {
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ Connexion MongoDB r√©ussie');
  } catch (error) {
    console.error('‚ùå Erreur connexion MongoDB:', error.message);
    process.exit(1);
  }
}

async function testDraftConflictResolution() {
  console.log('\nüß™ Test de r√©solution des conflits de brouillons\n');

  const testOptions = {
    workspaceId: new mongoose.Types.ObjectId(),
    userId: new mongoose.Types.ObjectId(),
    year: 2024
  };

  try {
    // Test 1: Cr√©er un devis brouillon avec num√©ro manuel
    console.log('üìù Test 1: Cr√©ation devis brouillon avec num√©ro manuel');
    
    const quoteDraft1 = await generateQuoteNumber('D', {
      ...testOptions,
      isDraft: true,
      manualNumber: '000002'
    });
    
    console.log(`   Premier brouillon: ${quoteDraft1}`);
    
    // Simuler la cr√©ation du devis en base
    const testQuote = new Quote({
      number: quoteDraft1,
      status: 'DRAFT',
      workspaceId: testOptions.workspaceId,
      createdBy: testOptions.userId,
      prefix: 'D',
      issueDate: new Date(),
      validUntil: new Date(),
      client: { name: 'Test Client', email: 'test@test.com' },
      companyInfo: { name: 'Test Company', email: 'company@test.com' },
      items: [],
      totalHT: 0,
      totalTTC: 0,
      totalVAT: 0,
      finalTotalHT: 0,
      finalTotalTTC: 0
    });
    
    await testQuote.save();
    console.log(`   ‚úÖ Devis sauv√© en base avec num√©ro: ${testQuote.number}`);

    // Test 2: Cr√©er un second devis brouillon avec le m√™me num√©ro (conflit)
    console.log('\nüìù Test 2: Cr√©ation second devis avec m√™me num√©ro (conflit)');
    
    const quoteDraft2 = await generateQuoteNumber('D', {
      ...testOptions,
      isDraft: true,
      manualNumber: '000002'
    });
    
    console.log(`   Second brouillon: ${quoteDraft2}`);
    
    // V√©rifier que l'ancien brouillon a √©t√© renomm√©
    const updatedQuote = await Quote.findById(testQuote._id);
    console.log(`   Ancien brouillon renomm√©: ${updatedQuote.number}`);
    
    // V√©rifications
    const hasDoublePrefix = updatedQuote.number.includes('DRAFT-DRAFT-');
    console.log(`   ‚ùå Double pr√©fixe DRAFT-DRAFT-: ${hasDoublePrefix ? 'D√âTECT√â' : 'ABSENT'}`);
    console.log(`   ‚úÖ Format correct: ${!hasDoublePrefix ? '‚úÖ' : '‚ùå'}`);
    
    // Test 3: M√™me test pour les factures
    console.log('\nüí∞ Test 3: Test identique pour les factures');
    
    const invoiceDraft1 = await generateInvoiceNumber('F', {
      ...testOptions,
      isDraft: true,
      manualNumber: '000003'
    });
    
    console.log(`   Premier brouillon facture: ${invoiceDraft1}`);
    
    // Simuler la cr√©ation de la facture en base
    const testInvoice = new Invoice({
      number: invoiceDraft1,
      status: 'DRAFT',
      workspaceId: testOptions.workspaceId,
      createdBy: testOptions.userId,
      prefix: 'F',
      issueDate: new Date(),
      executionDate: new Date(),
      client: { name: 'Test Client', email: 'test@test.com' },
      companyInfo: { name: 'Test Company', email: 'company@test.com' },
      items: [],
      totalHT: 0,
      totalTTC: 0,
      totalVAT: 0,
      finalTotalHT: 0,
      finalTotalTTC: 0
    });
    
    await testInvoice.save();
    console.log(`   ‚úÖ Facture sauv√©e en base avec num√©ro: ${testInvoice.number}`);

    // Cr√©er un conflit
    const invoiceDraft2 = await generateInvoiceNumber('F', {
      ...testOptions,
      isDraft: true,
      manualNumber: '000003'
    });
    
    console.log(`   Second brouillon facture: ${invoiceDraft2}`);
    
    // V√©rifier que l'ancienne facture a √©t√© renomm√©e
    const updatedInvoice = await Invoice.findById(testInvoice._id);
    console.log(`   Ancienne facture renomm√©e: ${updatedInvoice.number}`);
    
    // V√©rifications
    const invoiceHasDoublePrefix = updatedInvoice.number.includes('DRAFT-DRAFT-');
    console.log(`   ‚ùå Double pr√©fixe DRAFT-DRAFT-: ${invoiceHasDoublePrefix ? 'D√âTECT√â' : 'ABSENT'}`);
    console.log(`   ‚úÖ Format correct: ${!invoiceHasDoublePrefix ? '‚úÖ' : '‚ùå'}`);

    // Test 4: Test avec un num√©ro qui commence d√©j√† par DRAFT-
    console.log('\nüîç Test 4: Test avec num√©ro commen√ßant d√©j√† par DRAFT-');
    
    const quoteDraft3 = await generateQuoteNumber('D', {
      ...testOptions,
      isDraft: true,
      manualNumber: 'DRAFT-000004'  // Num√©ro qui commence d√©j√† par DRAFT-
    });
    
    console.log(`   Brouillon avec pr√©fixe existant: ${quoteDraft3}`);
    
    // Cr√©er le devis
    const testQuote2 = new Quote({
      number: quoteDraft3,
      status: 'DRAFT',
      workspaceId: testOptions.workspaceId,
      createdBy: testOptions.userId,
      prefix: 'D',
      issueDate: new Date(),
      validUntil: new Date(),
      client: { name: 'Test Client', email: 'test@test.com' },
      companyInfo: { name: 'Test Company', email: 'company@test.com' },
      items: [],
      totalHT: 0,
      totalTTC: 0,
      totalVAT: 0,
      finalTotalHT: 0,
      finalTotalTTC: 0
    });
    
    await testQuote2.save();
    
    // Cr√©er un conflit avec le m√™me num√©ro
    const quoteDraft4 = await generateQuoteNumber('D', {
      ...testOptions,
      isDraft: true,
      manualNumber: 'DRAFT-000004'  // M√™me num√©ro avec pr√©fixe
    });
    
    console.log(`   Second brouillon avec pr√©fixe: ${quoteDraft4}`);
    
    // V√©rifier le renommage
    const updatedQuote2 = await Quote.findById(testQuote2._id);
    console.log(`   Ancien brouillon renomm√©: ${updatedQuote2.number}`);
    
    const hasTriplePrefix = updatedQuote2.number.includes('DRAFT-DRAFT-DRAFT-');
    const hasDoublePrefix2 = updatedQuote2.number.includes('DRAFT-DRAFT-') && !hasTriplePrefix;
    
    console.log(`   ‚ùå Triple pr√©fixe DRAFT-DRAFT-DRAFT-: ${hasTriplePrefix ? 'D√âTECT√â' : 'ABSENT'}`);
    console.log(`   ‚ùå Double pr√©fixe DRAFT-DRAFT-: ${hasDoublePrefix2 ? 'D√âTECT√â' : 'ABSENT'}`);
    console.log(`   ‚úÖ Format correct: ${!hasTriplePrefix && !hasDoublePrefix2 ? '‚úÖ' : '‚ùå'}`);

    // Nettoyage
    await Quote.deleteMany({ workspaceId: testOptions.workspaceId });
    await Invoice.deleteMany({ workspaceId: testOptions.workspaceId });
    console.log('\nüßπ Nettoyage des donn√©es de test termin√©');

  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error.message);
    console.error(error.stack);
  }
}

async function main() {
  console.log('üöÄ D√©marrage des tests de r√©solution des conflits de brouillons');
  
  await connectDB();
  await testDraftConflictResolution();
  
  console.log('\n‚úÖ Tests termin√©s');
  await mongoose.disconnect();
  process.exit(0);
}

// Gestion des erreurs non captur√©es
process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Erreur non g√©r√©e:', reason);
  process.exit(1);
});

process.on('SIGINT', async () => {
  console.log('\n‚èπÔ∏è  Arr√™t du script...');
  await mongoose.disconnect();
  process.exit(0);
});

main().catch(console.error);
