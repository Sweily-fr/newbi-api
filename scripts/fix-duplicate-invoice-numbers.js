#!/usr/bin/env node

/**
 * Script pour identifier et corriger les num√©ros de factures en doublon
 * qui causent l'erreur E11000 duplicate key error
 */

import mongoose from 'mongoose';
import Invoice from '../src/models/Invoice.js';

// Configuration MongoDB
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://newbiAdmin:newbiPassword2024@localhost:27017/newbi?authSource=admin';

async function connectDB() {
  try {
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ Connexion MongoDB r√©ussie');
  } catch (error) {
    console.error('‚ùå Erreur de connexion MongoDB:', error);
    process.exit(1);
  }
}

async function findDuplicateInvoices() {
  console.log('\nüîç Recherche des factures avec num√©ros en doublon...');
  
  // Agr√©gation pour trouver les doublons par workspaceId, number et ann√©e
  const duplicates = await Invoice.aggregate([
    {
      $addFields: {
        issueYear: { $year: '$issueDate' }
      }
    },
    {
      $group: {
        _id: {
          workspaceId: '$workspaceId',
          number: '$number',
          issueYear: '$issueYear'
        },
        count: { $sum: 1 },
        invoices: { $push: { id: '$_id', status: '$status', createdAt: '$createdAt', number: '$number' } }
      }
    },
    {
      $match: {
        count: { $gt: 1 }
      }
    }
  ]);
  
  return duplicates;
}

async function fixDuplicateInvoices(dryRun = true) {
  console.log(`\nüîß ${dryRun ? 'SIMULATION' : 'CORRECTION'} des doublons...`);
  
  const duplicates = await findDuplicateInvoices();
  
  if (duplicates.length === 0) {
    console.log('‚úÖ Aucun doublon trouv√©!');
    return;
  }
  
  console.log(`üìã ${duplicates.length} groupe(s) de doublons trouv√©(s):`);
  
  for (const duplicate of duplicates) {
    const { workspaceId, number, issueYear } = duplicate._id;
    const invoices = duplicate.invoices;
    
    console.log(`\nüìÑ Doublon d√©tect√©:`);
    console.log(`   WorkspaceId: ${workspaceId}`);
    console.log(`   Num√©ro: ${number}`);
    console.log(`   Ann√©e: ${issueYear}`);
    console.log(`   Nombre de factures: ${invoices.length}`);
    
    // Trier par date de cr√©ation (garder la plus ancienne)
    invoices.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));
    
    console.log(`   üìã Factures concern√©es:`);
    invoices.forEach((invoice, index) => {
      console.log(`     ${index + 1}. ID: ${invoice.id} | Status: ${invoice.status} | Cr√©√©e: ${new Date(invoice.createdAt).toLocaleString()}`);
    });
    
    // Garder la premi√®re (plus ancienne), renommer les autres
    const [keepInvoice, ...duplicateInvoices] = invoices;
    
    console.log(`   ‚úÖ Garder: ${keepInvoice.id} (plus ancienne)`);
    
    for (let i = 0; i < duplicateInvoices.length; i++) {
      const duplicateInvoice = duplicateInvoices[i];
      const timestamp = Date.now().toString().slice(-6);
      const newNumber = `${number}-${timestamp}-${i + 1}`;
      
      console.log(`   üîÑ Renommer: ${duplicateInvoice.id} ‚Üí ${newNumber}`);
      
      if (!dryRun) {
        try {
          await Invoice.findByIdAndUpdate(duplicateInvoice.id, {
            number: newNumber
          });
          console.log(`     ‚úÖ Renomm√© avec succ√®s`);
        } catch (error) {
          console.log(`     ‚ùå Erreur lors du renommage: ${error.message}`);
        }
      }
    }
  }
  
  if (dryRun) {
    console.log('\n‚ö†Ô∏è  SIMULATION TERMIN√âE - Aucune modification appliqu√©e');
    console.log('üí° Ex√©cutez avec --fix pour appliquer les corrections');
  } else {
    console.log('\n‚úÖ CORRECTIONS APPLIQU√âES');
  }
}

async function validateUniqueConstraint() {
  console.log('\nüîç Validation de la contrainte d\'unicit√©...');
  
  try {
    // Tenter de cr√©er l'index unique pour v√©rifier s'il y a encore des conflits
    await Invoice.collection.createIndex(
      { number: 1, workspaceId: 1, issueYear: 1 },
      { 
        unique: true, 
        name: 'number_workspaceId_year_unique_test',
        background: true 
      }
    );
    
    console.log('‚úÖ Contrainte d\'unicit√© respect√©e - aucun conflit d√©tect√©');
    
    // Supprimer l'index de test
    await Invoice.collection.dropIndex('number_workspaceId_year_unique_test');
    
  } catch (error) {
    if (error.code === 11000) {
      console.log('‚ùå Contrainte d\'unicit√© viol√©e - des doublons existent encore');
      console.log('üîç D√©tails de l\'erreur:', error.message);
      return false;
    } else {
      console.log('‚ö†Ô∏è  Erreur lors de la validation:', error.message);
      return false;
    }
  }
  
  return true;
}

async function main() {
  const args = process.argv.slice(2);
  const dryRun = !args.includes('--fix');
  
  console.log('üîß Correction des num√©ros de factures en doublon');
  console.log('=' .repeat(50));
  
  if (dryRun) {
    console.log('üîç MODE SIMULATION - Aucune modification ne sera appliqu√©e');
  } else {
    console.log('‚ö†Ô∏è  MODE CORRECTION - Les modifications seront appliqu√©es');
  }
  
  await connectDB();
  
  try {
    // √âtape 1: Identifier les doublons
    const duplicates = await findDuplicateInvoices();
    
    if (duplicates.length === 0) {
      console.log('\nüéâ Aucun doublon trouv√©!');
      
      // Valider la contrainte d'unicit√©
      const isValid = await validateUniqueConstraint();
      if (isValid) {
        console.log('‚úÖ La base de donn√©es est pr√™te pour la contrainte d\'unicit√©');
      }
    } else {
      console.log(`\n‚ö†Ô∏è  ${duplicates.length} groupe(s) de doublons d√©tect√©(s)`);
      
      // √âtape 2: Corriger les doublons
      await fixDuplicateInvoices(dryRun);
      
      if (!dryRun) {
        // √âtape 3: Valider apr√®s correction
        console.log('\nüîç Validation post-correction...');
        const isValid = await validateUniqueConstraint();
        if (isValid) {
          console.log('üéâ Tous les doublons ont √©t√© corrig√©s avec succ√®s!');
        } else {
          console.log('‚ùå Des doublons persistent - une intervention manuelle peut √™tre n√©cessaire');
        }
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  } finally {
    await mongoose.disconnect();
    console.log('\nüëã D√©connexion MongoDB');
  }
}

// Ex√©cuter le script
main().catch(console.error);
