import path from 'path';
import { fileURLToPath } from 'url';
import { MongoClient } from 'mongodb';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Charger les variables d'environnement depuis ecosystem.config.cjs
const ecosystemPath = path.join(__dirname, '..', 'ecosystem.config.cjs');
console.log('üìÑ Chargement des variables depuis ecosystem.config.cjs');

try {
  const { createRequire } = await import('module');
  const require = createRequire(import.meta.url);
  const ecosystemConfig = require(ecosystemPath);
  const appConfig = ecosystemConfig.apps[0];
  
  if (appConfig && appConfig.env) {
    Object.assign(process.env, appConfig.env);
    console.log('‚úÖ Variables d\'environnement charg√©es depuis ecosystem.config.cjs');
  }
} catch (error) {
  console.error('‚ùå Erreur lors du chargement d\'ecosystem.config.cjs:', error.message);
  process.exit(1);
}

async function diagnoseLoginIssue() {
  console.log('üîç DIAGNOSTIC DES PROBL√àMES DE CONNEXION POST-MIGRATION');
  console.log('============================================================');
  
  const client = new MongoClient(process.env.MONGODB_URI);
  
  try {
    await client.connect();
    console.log('‚úÖ Connexion MongoDB √©tablie');
    
    const db = client.db();
    
    // 1. V√©rifier les collections d'utilisateurs
    console.log('\nüìã 1. ANALYSE DES COLLECTIONS D\'UTILISATEURS');
    console.log('------------------------------------------------------------');
    
    const collections = await db.listCollections().toArray();
    const userCollections = collections.filter(c => 
      c.name.toLowerCase().includes('user')
    );
    
    console.log('Collections li√©es aux utilisateurs:');
    for (const collection of userCollections) {
      const count = await db.collection(collection.name).countDocuments();
      console.log(`  - ${collection.name}: ${count} documents`);
    }
    
    // 2. V√©rifier la structure des utilisateurs dans la collection 'user'
    console.log('\nüìã 2. STRUCTURE DES UTILISATEURS DANS LA COLLECTION "user"');
    console.log('------------------------------------------------------------');
    
    const userCount = await db.collection('user').countDocuments();
    console.log(`Total utilisateurs dans 'user': ${userCount}`);
    
    if (userCount > 0) {
      // Prendre quelques exemples d'utilisateurs
      const sampleUsers = await db.collection('user').find({}).limit(3).toArray();
      
      console.log('\nüìä √âchantillon d\'utilisateurs:');
      for (const user of sampleUsers) {
        console.log(`\n  üë§ Utilisateur: ${user.email}`);
        console.log(`     - ID: ${user._id}`);
        console.log(`     - Password: ${user.password ? 'Pr√©sent (hash√©)' : '‚ùå MANQUANT'}`);
        console.log(`     - Email v√©rifi√©: ${user.isEmailVerified ? '‚úÖ' : '‚ùå'}`);
        console.log(`     - Compte d√©sactiv√©: ${user.isDisabled ? '‚ùå OUI' : '‚úÖ Non'}`);
        console.log(`     - WorkspaceId: ${user.workspaceId || user.organizationId || '‚ùå MANQUANT'}`);
        console.log(`     - Cr√©√© le: ${user.createdAt}`);
        console.log(`     - Modifi√© le: ${user.updatedAt}`);
        
        // V√©rifier les champs critiques
        const criticalFields = ['email', 'password'];
        const missingFields = criticalFields.filter(field => !user[field]);
        if (missingFields.length > 0) {
          console.log(`     ‚ö†Ô∏è  Champs critiques manquants: ${missingFields.join(', ')}`);
        }
      }
    }
    
    // 3. V√©rifier les index de la collection 'user'
    console.log('\nüìã 3. INDEX DE LA COLLECTION "user"');
    console.log('------------------------------------------------------------');
    
    const indexes = await db.collection('user').indexes();
    console.log('Index existants:');
    for (const index of indexes) {
      console.log(`  - ${index.name}: ${JSON.stringify(index.key)}`);
      if (index.unique) {
        console.log(`    ‚Üí Index unique`);
      }
      if (index.sparse) {
        console.log(`    ‚Üí Index sparse`);
      }
    }
    
    // 4. Tester une requ√™te de connexion simul√©e
    console.log('\nüìã 4. TEST DE REQU√äTE DE CONNEXION SIMUL√âE');
    console.log('------------------------------------------------------------');
    
    if (userCount > 0) {
      const testUser = await db.collection('user').findOne({});
      if (testUser) {
        console.log(`üß™ Test avec l'utilisateur: ${testUser.email}`);
        
        // Simuler une recherche par email (comme lors de la connexion)
        const foundUser = await db.collection('user').findOne({ 
          email: testUser.email.toLowerCase() 
        });
        
        if (foundUser) {
          console.log('‚úÖ Utilisateur trouv√© par recherche email');
          console.log(`   - ID trouv√©: ${foundUser._id}`);
          console.log(`   - Email trouv√©: ${foundUser.email}`);
        } else {
          console.log('‚ùå Utilisateur NON trouv√© par recherche email');
        }
      }
    }
    
    // 5. V√©rifier les organisations li√©es
    console.log('\nüìã 5. ORGANISATIONS ET WORKSPACES');
    console.log('------------------------------------------------------------');
    
    const orgCount = await db.collection('organization').countDocuments();
    const memberCount = await db.collection('member').countDocuments();
    
    console.log(`Organisations: ${orgCount}`);
    console.log(`Membres: ${memberCount}`);
    
    if (orgCount > 0) {
      const sampleOrg = await db.collection('organization').findOne({});
      console.log(`\nüìä Exemple d'organisation:`);
      console.log(`   - ID: ${sampleOrg._id}`);
      console.log(`   - Nom: ${sampleOrg.name || 'Non d√©fini'}`);
      console.log(`   - Cr√©√©e le: ${sampleOrg.createdAt}`);
    }
    
    // 6. V√©rifier les sessions actives
    console.log('\nüìã 6. SESSIONS ACTIVES');
    console.log('------------------------------------------------------------');
    
    const sessionCount = await db.collection('session').countDocuments();
    console.log(`Sessions totales: ${sessionCount}`);
    
    if (sessionCount > 0) {
      const activeSessions = await db.collection('session').find({
        expires: { $gt: new Date() }
      }).toArray();
      
      console.log(`Sessions actives: ${activeSessions.length}`);
      
      if (activeSessions.length > 0) {
        console.log('\nüìä Sessions actives:');
        for (const session of activeSessions.slice(0, 3)) {
          const sessionData = JSON.parse(session.session || '{}');
          console.log(`   - Session ID: ${session._id}`);
          console.log(`   - Expire le: ${session.expires}`);
          console.log(`   - Utilisateur: ${sessionData.passport?.user || 'Non d√©fini'}`);
        }
      }
    }
    
    // 7. Recommandations
    console.log('\nüìã 7. DIAGNOSTIC ET RECOMMANDATIONS');
    console.log('============================================================');
    
    const issues = [];
    const recommendations = [];
    
    if (userCount === 0) {
      issues.push('‚ùå Aucun utilisateur dans la collection "user"');
      recommendations.push('V√©rifier si la migration s\'est correctement d√©roul√©e');
    }
    
    if (orgCount !== userCount) {
      issues.push(`‚ö†Ô∏è  Nombre d'organisations (${orgCount}) diff√©rent du nombre d'utilisateurs (${userCount})`);
      recommendations.push('V√©rifier que chaque utilisateur a bien son organisation');
    }
    
    if (sessionCount > 0) {
      issues.push('‚ö†Ô∏è  Des sessions existent encore');
      recommendations.push('Red√©marrer l\'application ou vider les sessions pour forcer une nouvelle authentification');
    }
    
    if (issues.length === 0) {
      console.log('‚úÖ Aucun probl√®me majeur d√©tect√© dans la structure des donn√©es');
      recommendations.push('V√©rifier les logs de l\'application lors des tentatives de connexion');
      recommendations.push('Tester la connexion avec un utilisateur sp√©cifique');
      recommendations.push('V√©rifier que l\'application utilise bien la nouvelle structure');
    } else {
      console.log('‚ùå Probl√®mes d√©tect√©s:');
      issues.forEach(issue => console.log(`   ${issue}`));
    }
    
    console.log('\nüí° Recommandations:');
    recommendations.forEach(rec => console.log(`   ‚Ä¢ ${rec}`));
    
    console.log('\nüîß Commandes utiles pour d√©boguer:');
    console.log('   ‚Ä¢ Tester une connexion: node scripts/test-user-login.js <email>');
    console.log('   ‚Ä¢ Vider les sessions: db.session.deleteMany({})');
    console.log('   ‚Ä¢ Red√©marrer l\'app: pm2 restart newbi');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du diagnostic:', error.message);
    process.exit(1);
  } finally {
    await client.close();
    console.log('\n‚úÖ Connexion MongoDB ferm√©e');
  }
}

diagnoseLoginIssue().catch(console.error);
