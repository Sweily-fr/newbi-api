#!/usr/bin/env node

/**
 * Script de maintenance complet pour le syst√®me de trials
 * Combine activation, validation et nettoyage
 */

import { spawn } from 'child_process';
import readline from 'readline';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(query) {
  return new Promise(resolve => rl.question(query, resolve));
}

async function runScript(scriptName, args = []) {
  return new Promise((resolve, reject) => {
    const scriptPath = path.join(__dirname, scriptName);
    const child = spawn('node', [scriptPath, ...args], {
      stdio: 'inherit',
      cwd: __dirname
    });

    child.on('close', (code) => {
      if (code === 0) {
        resolve();
      } else {
        reject(new Error(`Script termin√© avec le code ${code}`));
      }
    });

    child.on('error', (error) => {
      reject(error);
    });
  });
}

async function showMenu() {
  console.log('\nüéØ MAINTENANCE DU SYST√àME DE TRIALS');
  console.log('===================================');
  console.log('1. üîç Valider l\'√©tat actuel des trials');
  console.log('2. üöÄ Activer les trials pour utilisateurs existants');
  console.log('3. üßπ Nettoyer les trials expir√©s');
  console.log('4. üîÑ Maintenance compl√®te (validation + nettoyage)');
  console.log('5. üìä Rapport d√©taill√© uniquement');
  console.log('0. ‚ùå Quitter');
  
  const choice = await question('\nChoisissez une option (0-5): ');
  return choice;
}

async function validateTrials() {
  console.log('\nüìä VALIDATION DES TRIALS');
  console.log('========================');
  
  try {
    await runScript('validate-trial-activation.js');
    console.log('\n‚úÖ Validation termin√©e');
  } catch (error) {
    console.error('‚ùå Erreur lors de la validation:', error.message);
  }
}

async function activateTrials() {
  console.log('\nüöÄ ACTIVATION DES TRIALS');
  console.log('========================');
  
  const confirm = await question('Voulez-vous activer les trials pour les utilisateurs existants ? (o/N): ');
  if (confirm.toLowerCase() !== 'o') {
    console.log('‚ùå Activation annul√©e');
    return;
  }
  
  try {
    // D'abord en dry-run
    console.log('\nüîç Analyse pr√©liminaire...');
    await runScript('enable-trial-for-existing-users.js');
    
    const proceed = await question('\nVoulez-vous appliquer ces changements ? (o/N): ');
    if (proceed.toLowerCase() !== 'o') {
      console.log('‚ùå Application annul√©e');
      return;
    }
    
    const finalConfirm = await question('‚ö†Ô∏è  ATTENTION: Modification de la base de donn√©es.\nTapez "CONFIRMER" pour continuer: ');
    if (finalConfirm !== 'CONFIRMER') {
      console.log('‚ùå Op√©ration annul√©e');
      return;
    }
    
    console.log('\nüöÄ Activation en cours...');
    await runScript('enable-trial-for-existing-users.js', ['--confirm']);
    console.log('\n‚úÖ Activation termin√©e');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'activation:', error.message);
  }
}

async function cleanupExpiredTrials() {
  console.log('\nüßπ NETTOYAGE DES TRIALS EXPIR√âS');
  console.log('===============================');
  
  try {
    // D'abord en dry-run
    console.log('\nüîç Recherche des trials expir√©s...');
    await runScript('cleanup-expired-trials.js');
    
    const proceed = await question('\nVoulez-vous nettoyer ces trials expir√©s ? (o/N): ');
    if (proceed.toLowerCase() !== 'o') {
      console.log('‚ùå Nettoyage annul√©');
      return;
    }
    
    console.log('\nüßπ Nettoyage en cours...');
    await runScript('cleanup-expired-trials.js', ['--confirm']);
    console.log('\n‚úÖ Nettoyage termin√©');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du nettoyage:', error.message);
  }
}

async function fullMaintenance() {
  console.log('\nüîÑ MAINTENANCE COMPL√àTE');
  console.log('=======================');
  
  const confirm = await question('Voulez-vous ex√©cuter la maintenance compl√®te ? (o/N): ');
  if (confirm.toLowerCase() !== 'o') {
    console.log('‚ùå Maintenance annul√©e');
    return;
  }
  
  try {
    console.log('\nüìä √âtape 1/3: Validation initiale...');
    await runScript('validate-trial-activation.js');
    
    console.log('\nüßπ √âtape 2/3: Nettoyage des trials expir√©s...');
    await runScript('cleanup-expired-trials.js', ['--confirm']);
    
    console.log('\nüìä √âtape 3/3: Validation finale...');
    await runScript('validate-trial-activation.js');
    
    console.log('\n‚úÖ Maintenance compl√®te termin√©e avec succ√®s!');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la maintenance:', error.message);
  }
}

async function generateReport() {
  console.log('\nüìä G√âN√âRATION DU RAPPORT');
  console.log('========================');
  
  try {
    await runScript('validate-trial-activation.js');
    console.log('\n‚úÖ Rapport g√©n√©r√© et sauvegard√©');
  } catch (error) {
    console.error('‚ùå Erreur lors de la g√©n√©ration du rapport:', error.message);
  }
}

async function main() {
  console.log('üéØ SYST√àME DE MAINTENANCE DES TRIALS NEWBI');
  console.log('==========================================');
  console.log('Ce script vous permet de g√©rer le syst√®me de trials de Newbi.\n');
  
  try {
    while (true) {
      const choice = await showMenu();
      
      switch (choice) {
        case '1':
          await validateTrials();
          break;
        case '2':
          await activateTrials();
          break;
        case '3':
          await cleanupExpiredTrials();
          break;
        case '4':
          await fullMaintenance();
          break;
        case '5':
          await generateReport();
          break;
        case '0':
          console.log('\nüëã Au revoir!');
          rl.close();
          return;
        default:
          console.log('‚ùå Option invalide, veuillez choisir entre 0 et 5');
      }
      
      const continueChoice = await question('\nAppuyez sur Entr√©e pour continuer ou tapez "q" pour quitter: ');
      if (continueChoice.toLowerCase() === 'q') {
        console.log('\nüëã Au revoir!');
        break;
      }
    }
    
  } catch (error) {
    console.error('\n‚ùå Erreur fatale:', error.message);
    process.exit(1);
  } finally {
    rl.close();
  }
}

// Gestion des signaux
process.on('SIGINT', () => {
  console.log('\n‚ö†Ô∏è  Interruption d√©tect√©e');
  rl.close();
  process.exit(0);
});

// V√©rifier si le script est ex√©cut√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error);
}
